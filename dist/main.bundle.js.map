{"version":3,"file":"main.bundle.js","mappings":"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","sources":["webpack://webgl2-vs-webgpu/./src/examples/triangle/webgl2/shader.ts","webpack://webgl2-vs-webgpu/./src/examples/triangle/webgl2/triangle.webgl2.ts","webpack://webgl2-vs-webgpu/./src/examples/triangle/webgpu/shader.wgsl","webpack://webgl2-vs-webgpu/./src/helpers/webgl2/initialiseGL.ts","webpack://webgl2-vs-webgpu/./src/helpers/webgl2/createShader.ts","webpack://webgl2-vs-webgpu/./src/helpers/webgl2/createProgram.ts","webpack://webgl2-vs-webgpu/./src/helpers/common/resizeCanvasToDisplaySize.ts","webpack://webgl2-vs-webgpu/./src/examples/square/webgl2/square.webgl2.ts","webpack://webgl2-vs-webgpu/./src/examples/square/webgl2/shader.square.webgl.ts","webpack://webgl2-vs-webgpu/./src/examples/square/webgpu/shader.square.webgpu.wgsl","webpack://webgl2-vs-webgpu/./src/helpers/webgpu/initialiseGPU.ts","webpack://webgl2-vs-webgpu/./src/helpers/webgpu/createGPUBuffer.ts","webpack://webgl2-vs-webgpu/./src/examples/square-with-indexed-vertices/webgpu/shader.square-with-indexed-vertices.webgpu.wgsl","webpack://webgl2-vs-webgpu/./src/examples/square-with-indexed-vertices/webgl2/square-with-indexed-vertices.webgl2.ts","webpack://webgl2-vs-webgpu/./src/examples/square-with-indexed-vertices/webgl2/shader.square-with-indexed-vertices.webgl.ts","webpack://webgl2-vs-webgpu/./src/examples/cube-with-distinct-vertex-colors/webgpu/shader.cube-with-distinct-vertex-colors.wgsl","webpack://webgl2-vs-webgpu/./src/helpers/common/cubeVertices.ts","webpack://webgl2-vs-webgpu/./node_modules/gl-matrix/esm/common.js","webpack://webgl2-vs-webgpu/./node_modules/gl-matrix/esm/mat4.js","webpack://webgl2-vs-webgpu/./src/helpers/common/camera.ts","webpack://webgl2-vs-webgpu/./src/helpers/common/transforms.ts","webpack://webgl2-vs-webgpu/./src/examples/cube-with-distinct-vertex-colors/webgl2/shader.cube-with-distinct-vertex-colors.webgl.ts","webpack://webgl2-vs-webgpu/./src/helpers/webgl2/createGL2Buffer.ts","webpack://webgl2-vs-webgpu/./src/helpers/webgl2/setGL2Attribute.ts","webpack://webgl2-vs-webgpu/./src/examples/cube-with-distinct-vertex-colors/webgl2/cube-with-distinct-vertex-colors.webgl2.ts","webpack://webgl2-vs-webgpu/./src/examples/cube-with-distinct-face-colors/webgpu/shader.cube-with-distinct-face-colors.wgsl","webpack://webgl2-vs-webgpu/./src/examples/cube-with-distinct-face-colors/webgl2/shader.cube-with-distinct-face-colors.webgl.ts","webpack://webgl2-vs-webgpu/./src/examples/cube-with-distinct-face-colors/webgl2/cube-with-distinct-face-colors.webgl2.ts","webpack://webgl2-vs-webgpu/./src/examples/cube-with-texture/webgpu/shader.cube-with-texture.wgsl","webpack://webgl2-vs-webgpu/./src/examples/cube-with-texture/webgl2/cube-with-texture.webgl2.ts","webpack://webgl2-vs-webgpu/./src/examples/cube-with-texture/webgl2/shader.cube-with-texture.webgl.ts","webpack://webgl2-vs-webgpu/./src/examples/interactive-cube/webgl2/interactive-cube.webgl2.ts","webpack://webgl2-vs-webgpu/./src/examples/interactive-cube/webgl2/shader.interactive-cube.webgl.ts","webpack://webgl2-vs-webgpu/./src/main.ts","webpack://webgl2-vs-webgpu/./src/examples/triangle/webgpu/triangle.webgpu.ts","webpack://webgl2-vs-webgpu/./src/examples/square/webgpu/square.webgpu.ts","webpack://webgl2-vs-webgpu/./src/examples/square-with-indexed-vertices/webgpu/square-with-indexed-vertices.webgpu.ts","webpack://webgl2-vs-webgpu/./src/examples/cube-with-distinct-face-colors/webgpu/cube-with-distinct-face-colors.webgpu.ts","webpack://webgl2-vs-webgpu/./src/examples/cube-with-distinct-vertex-colors/webgpu/cube-with-distinct-vertex-colors.webgpu.ts","webpack://webgl2-vs-webgpu/./src/examples/cube-with-texture/webgpu/cube-with-texture.webgpu.ts","webpack://webgl2-vs-webgpu/./src/examples/interactive-cube/webgpu/interactive-cube.webgpu.ts"],"sourcesContent":["export const vertexShaderSource:string = `#version 300 es\r\nin vec4 a_position;\r\nout vec4 out_color;\r\n\r\nvoid main(){\r\n    gl_Position = a_position;\r\n    out_color = vec4(1.0, 0.0, 0.0, 1.0);\r\n}\r\n`;\r\n\r\nexport const fragmentShaderSource:string = `#version 300 es\r\nprecision highp float;\r\nin vec4 out_color;\r\nout vec4 outColor;\r\n\r\nvoid main(){\r\n    outColor = out_color;\r\n}\r\n`","import { vertexShaderSource, fragmentShaderSource } from \"./shader\";\r\n\r\nconst webgl2DrawTriangle = () => {\r\n    /*******************************************************************/\r\n    /****************           Initialise GL           ****************/\r\n    /*******************************************************************/\r\n    const canvas:HTMLCanvasElement = document.getElementById(\"canvas-webGL2\") as HTMLCanvasElement;\r\n    const gl:WebGL2RenderingContext = canvas.getContext(\"webgl2\") as WebGL2RenderingContext;\r\n\r\n\r\n    /*******************************************************************/\r\n    /**************** Create Shaders and Shader Program ****************/\r\n    /*******************************************************************/\r\n    const vertexShader:WebGLShader = gl.createShader(gl.VERTEX_SHADER) as WebGLShader;\r\n    gl.shaderSource(vertexShader,vertexShaderSource);\r\n    gl.compileShader(vertexShader);\r\n    let success = gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS);\r\n    if(!success){\r\n        console.log(gl.getShaderInfoLog(vertexShader))\r\n    }\r\n\r\n    const fragmentShader:WebGLShader = gl.createShader(gl.FRAGMENT_SHADER) as WebGLShader;\r\n    gl.shaderSource(fragmentShader,fragmentShaderSource);\r\n    gl.compileShader(fragmentShader);\r\n    success = gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS);\r\n    if(!success){\r\n        console.log(gl.getShaderInfoLog(fragmentShader))\r\n    }\r\n\r\n    const program:WebGLProgram = gl.createProgram() as WebGLProgram;\r\n    gl.attachShader(program,vertexShader);\r\n    gl.attachShader(program,fragmentShader);\r\n    gl.linkProgram(program)\r\n    success = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n    if(!success){\r\n        console.log(gl.getProgramInfoLog(program))\r\n    }\r\n\r\n    /*******************************************************************/\r\n    /**********Create Vertex Buffer & Store Triangle's Vertices*********/\r\n    /*******************************************************************/\r\n    const positionBuffer:WebGLBuffer = gl.createBuffer() as WebGLBuffer;\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n    const positions:number[] = [\r\n        -0.5,-0.5,\r\n        0.0, 0.5,\r\n        0.5, -0.5\r\n    ];\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\r\n\r\n    /*******************************************************************/\r\n    /**********          Setup Vertex Array Object             *********/\r\n    /*******************************************************************/\r\n    const positionAttributeLocation:number = gl.getAttribLocation(program, \"a_position\");\r\n    const vao:WebGLVertexArrayObject = gl.createVertexArray() as WebGLVertexArrayObject;\r\n    gl.bindVertexArray(vao);\r\n    gl.enableVertexAttribArray(positionAttributeLocation);\r\n    const size = 2;\r\n    const type = gl.FLOAT;\r\n    const normalize = false;\r\n    const stride = 0;\r\n    const offset = 0;\r\n    gl.vertexAttribPointer(positionAttributeLocation,size, type, normalize, stride, offset);\r\n\r\n    /*******************************************************************/\r\n    /**********                Resize Canvas                   *********/\r\n    /*******************************************************************/\r\n    const displayWidth  = canvas.clientWidth;\r\n    const displayHeight = canvas.clientHeight;\r\n    const needResize = canvas.width  !== displayWidth || canvas.height !== displayHeight;\r\n    if (needResize) {\r\n      canvas.width  = displayWidth;\r\n      canvas.height = displayHeight;\r\n    }\r\n\r\n\r\n    /*******************************************************************/\r\n    /**********                    DRAW                        *********/\r\n    /*******************************************************************/   \r\n    gl.viewport(0,0,gl.canvas.width, gl.canvas.height);\r\n    gl.clearColor(1.0,1.0,1.0,1.0); \r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    gl.useProgram(program);\r\n    const primitiveType = gl.TRIANGLES;\r\n    const drawOffset = 0;\r\n    const count = 3;\r\n    gl.drawArrays(primitiveType, drawOffset, count);\r\n}\r\n\r\nexport default webgl2DrawTriangle;","export default \"struct Ouput{\\r\\n    @builtin(position) Position: vec4<f32>,\\r\\n    @location(0) vColor : vec4<f32>\\r\\n};\\r\\n\\r\\n@vertex\\r\\nfn vs_main(@location(0) pos: vec4<f32>) -> Ouput{\\r\\n    var position = pos;\\r\\n\\r\\n    var color = vec4<f32>(0.0,0.0,1.0,1.0);\\r\\n\\r\\n    var output: Ouput;\\r\\n    output.Position = position;\\r\\n    output.vColor = color;\\r\\n    return output;\\r\\n}\\r\\n\\r\\n@fragment\\r\\nfn fs_main(@location(0) vColor:vec4<f32>) -> @location(0) vec4<f32>{\\r\\n    return vColor;\\r\\n}\"","const initialiseGL = (id=\"canvas-webGL2\") => {\r\n        //get webgl rendering context\r\n        const canvas:HTMLCanvasElement = document.getElementById(id) as HTMLCanvasElement;\r\n        const gl:WebGL2RenderingContext = canvas.getContext(\"webgl2\") as WebGL2RenderingContext;\r\n        return [gl,canvas];\r\n}\r\n\r\nexport default initialiseGL;","const createShader = (gl:WebGL2RenderingContext, type:number, source:string) => {\r\n    const shader:WebGLShader = gl.createShader(type) as WebGLShader;\r\n    gl.shaderSource(shader,source);\r\n    gl.compileShader(shader);\r\n    let success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n    if(success){\r\n        return shader;\r\n    }\r\n    else console.log(gl.getShaderInfoLog(shader))\r\n\r\n    gl.deleteShader(shader);\r\n}\r\n\r\nexport default createShader;","const createProgram = (gl:WebGLRenderingContext, vertexShader:WebGLShader, fragmentShader:WebGLShader) => {\r\n    const program:WebGLProgram = gl.createProgram() as WebGLProgram;\r\n    gl.attachShader(program,vertexShader);\r\n    gl.attachShader(program,fragmentShader);\r\n    gl.linkProgram(program);\r\n    const success = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n    if(success){\r\n        return program;\r\n    }\r\n    gl.deleteProgram(program);\r\n}\r\n\r\nexport default createProgram;","const resizeCanvasToDisplaySize = (canvas:HTMLCanvasElement) => {\r\n    const displayWidth  = canvas.clientWidth;\r\n    const displayHeight = canvas.clientHeight;\r\n    const needResize = canvas.width  !== displayWidth ||\r\n                       canvas.height !== displayHeight;\r\n    if (needResize) {\r\n      canvas.width  = displayWidth;\r\n      canvas.height = displayHeight;\r\n    }\r\n    return needResize;\r\n}\r\n\r\nexport default resizeCanvasToDisplaySize;","import { vertexShaderSource, fragmentShaderSource } from \"./shader.square.webgl\"\r\nimport { createShader, createProgram, initialiseGL } from \"../../../helpers/webgl2\"\r\nimport {resizeCanvasToDisplaySize} from \"../../../helpers/common\"\r\nconst webGL2DrawSquare = () => {\r\n\r\n    /*******************************************************************/\r\n    /****************           Initialise GL           ****************/\r\n    /*******************************************************************/\r\n    const obj = initialiseGL();\r\n    const gl = obj[0] as WebGL2RenderingContext;\r\n    const canvas = obj[1] as HTMLCanvasElement;\r\n\r\n    /*******************************************************************/\r\n    /**************** Create Shaders and Shader Program ****************/\r\n    /*******************************************************************/\r\n    const vertexShader:WebGLShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource) as WebGLShader;\r\n    const fragmentShader:WebGLShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource) as WebGLShader;\r\n    const program:WebGLProgram = createProgram(gl,fragmentShader,vertexShader) as WebGLProgram;\r\n\r\n    /*******************************************************************/\r\n    /**********Create Vertex Buffer & Store Vertices & Colors***********/\r\n    /*******************************************************************/\r\n    const data:number[] = [\r\n        -0.5,-0.5, 1.0,0.0,0.0,\r\n        -0.5, 0.5, 0.0,1.0,0.0,\r\n        0.5, -0.5, 0.0,1.0,0.0,\r\n        -0.5, 0.5, 0.0,1.0,0.0,\r\n        0.5, -0.5, 0.0,1.0,0.0,\r\n        0.5,0.5, 1.0,0.0,0.0,\r\n    ];\r\n\r\n    const dataBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, dataBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(data), gl.STATIC_DRAW);\r\n\r\n    /*******************************************************************/\r\n    /**********          Setup Vertex Array Object             *********/\r\n    /*******************************************************************/\r\n    const positionAttributeLocation = gl.getAttribLocation(program,\"a_position\");\r\n    const colorAttributeLocation = gl.getAttribLocation(program,\"a_color\");\r\n    \r\n    const vao = gl.createVertexArray();\r\n    gl.bindVertexArray(vao);\r\n    gl.enableVertexAttribArray(positionAttributeLocation);\r\n    let size = 2;\r\n    let type = gl.FLOAT;\r\n    let normalize = false;\r\n    let stride = 20;\r\n    let offset = 0;\r\n\r\n    gl.vertexAttribPointer(positionAttributeLocation,size, type, normalize, stride, offset);\r\n\r\n    gl.enableVertexAttribArray(positionAttributeLocation);\r\n    size = 3;\r\n    type = gl.FLOAT;\r\n    normalize = false;\r\n    stride = 20;\r\n    offset = 8;\r\n    \r\n    gl.vertexAttribPointer(colorAttributeLocation,size, type, normalize, stride, offset);\r\n    gl.enableVertexAttribArray(colorAttributeLocation);\r\n    resizeCanvasToDisplaySize(canvas);\r\n\r\n    /*******************************************************************/\r\n    /**********                    DRAW                        *********/\r\n    /*******************************************************************/ \r\n    gl.viewport(0,0,gl.canvas.width, gl.canvas.height);\r\n    gl.clearColor(1.0,1.0,1.0,1.0); \r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    gl.useProgram(program);\r\n\r\n    const primitiveType = gl.TRIANGLES;\r\n    const drawOffset = 0;\r\n    const count = 6;\r\n    gl.drawArrays(primitiveType, drawOffset, count);\r\n}\r\n\r\nexport default webGL2DrawSquare;","export const vertexShaderSource:string = `#version 300 es\r\nin vec4 a_position;\r\nin vec4 a_color; \r\nout vec4 out_color;\r\nvoid main(){\r\n    gl_Position = a_position;\r\n    out_color = a_color;\r\n}\r\n`;\r\n\r\nexport const fragmentShaderSource:string = `#version 300 es\r\nprecision highp float;\r\n\r\nin vec4 out_color;\r\nout vec4 outColor;\r\nvoid main(){\r\n    outColor = out_color;\r\n}\r\n`","export default \"//vertex shader\\r\\nstruct Ouput{\\r\\n    @builtin(position) Position: vec4<f32>,\\r\\n    @location(0) vColor : vec4<f32>\\r\\n};\\r\\n\\r\\n@vertex\\r\\nfn vs_main(@location(1) pos: vec4<f32>, @location(2) col: vec4<f32>) -> Ouput{\\r\\n    var position = pos;\\r\\n    var color = col;\\r\\n\\r\\n    var output: Ouput;\\r\\n    output.Position = position;\\r\\n    output.vColor = color;\\r\\n    return output;\\r\\n}\\r\\n\\r\\n//fragment shader\\r\\n@fragment\\r\\nfn fs_main(@location(0) vColor:vec4<f32>) -> @location(0) vec4<f32>{\\r\\n    return vColor;\\r\\n}\"","const checkGPU = () => {\r\n    let result = '';\r\n    if(!navigator.gpu){\r\n        result = \"Your current browser does not support WebGPU\";\r\n    }\r\n    return result;\r\n}\r\n\r\nconst initialiseGPU = async (id=\"canvas-webGPU\") => {\r\n    const status = checkGPU();\r\n    let fpsContainer:HTMLElement = document.createElement('div');\r\n    let controlsContainer:HTMLElement = document.createElement('div');\r\n    fpsContainer = document.getElementById(\"fps-container\") as HTMLElement;\r\n    controlsContainer = document.getElementById(\"controls-container\") as HTMLElement;\r\n    if(status!==''){\r\n        const canvasParent = document.getElementById(\"webGPU\");\r\n        canvasParent? canvasParent.innerHTML=\"<h2>Your browser does not support WebGPU!<h2>\":null;\r\n        fpsContainer.style.display=\"none\";\r\n        controlsContainer.style.display=\"none\"\r\n    }\r\n    \r\n    const canvas = document.getElementById(id) as HTMLCanvasElement;\r\n    const adapter = await navigator.gpu?.requestAdapter(); //the gpu\r\n    const device = await adapter?.requestDevice() as GPUDevice; //provides a connection to the adapter(the gpu)\r\n    const context = canvas.getContext(\"webgpu\") as unknown as GPUCanvasContext;\r\n    \r\n    //adjust size of canvas\r\n    const displayWidth  = canvas.clientWidth;\r\n    const displayHeight = canvas.clientHeight;\r\n    const needResize = canvas.width  !== displayWidth ||\r\n                       canvas.height !== displayHeight;\r\n    if (needResize) {\r\n      canvas.width  = displayWidth;\r\n      canvas.height = displayHeight;\r\n    }\r\n\r\n    const format = await navigator.gpu.getPreferredCanvasFormat();\r\n\r\n    context.configure({\r\n        alphaMode:\"premultiplied\", device, format\r\n    })\r\n\r\n    return {device, canvas, format, context}\r\n}\r\n\r\nexport default initialiseGPU;","export const createGPUBuffer = (device:GPUDevice, data: Float32Array |Uint32Array, usageFlag:GPUBufferUsageFlags = GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST) => {\r\n    const buffer = device.createBuffer({\r\n        size: data.byteLength,\r\n        usage:usageFlag,\r\n        mappedAtCreation: true\r\n    });\r\n\r\n    if(usageFlag === GPUBufferUsage.VERTEX)new Float32Array(buffer.getMappedRange()).set(data);\r\n    else new Uint32Array(buffer.getMappedRange()).set(data);\r\n    buffer.unmap();\r\n    return buffer;\r\n}\r\n","export default \"//vertex shader\\r\\nstruct Ouput{\\r\\n    @builtin(position) Position: vec4<f32>,\\r\\n    @location(0) vColor : vec4<f32>\\r\\n};\\r\\n\\r\\n@vertex\\r\\nfn vs_main(@location(1) pos: vec4<f32>, @location(2) col: vec4<f32>) -> Ouput{\\r\\n    var position = pos;\\r\\n    var color = col;\\r\\n\\r\\n    var output: Ouput;\\r\\n    output.Position = position;\\r\\n    output.vColor = color;\\r\\n    return output;\\r\\n}\\r\\n\\r\\n//fragment shader\\r\\n@fragment\\r\\nfn fs_main(@location(0) vColor:vec4<f32>) -> @location(0) vec4<f32>{\\r\\n    return vColor;\\r\\n}\"","import { vertexShaderSource, fragmentShaderSource } from \"./shader.square-with-indexed-vertices.webgl\"\r\nimport { createShader, createProgram, initialiseGL } from \"../../../helpers/webgl2\"\r\nimport {resizeCanvasToDisplaySize} from \"../../../helpers/common\"\r\nconst webGL2DrawSquareWithIndexedVertices = () => {\r\n    /*******************************************************************/\r\n    /****************           Initialise GL           ****************/\r\n    /*******************************************************************/\r\n    const obj = initialiseGL();\r\n    const gl = obj[0] as WebGL2RenderingContext;\r\n    const canvas = obj[1] as HTMLCanvasElement;\r\n    \r\n    /*******************************************************************/\r\n    /**************** Create Shaders and Shader Program ****************/\r\n    /*******************************************************************/\r\n    const vertexShader:WebGLShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource) as WebGLShader;\r\n    const fragmentShader:WebGLShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource) as WebGLShader;\r\n    const program:WebGLProgram = createProgram(gl,fragmentShader,vertexShader) as WebGLProgram;\r\n\r\n    \r\n    /*******************************************************************/\r\n    /**********Create Vertex Buffer & Store Vertices & Colors***********/\r\n    /*******************************************************************/\r\n    const data:number[] = [\r\n        -0.5,-0.5, 1.0,0.0,0.0,\r\n        -0.5, 0.5, 0.0,0.0,1.0,\r\n        0.5, -0.5, 0.0,0.0,1.0,\r\n        0.5,0.5, 1.0,0.0,0.0,\r\n    ];\r\n\r\n    const dataBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, dataBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(data), gl.STATIC_DRAW);\r\n\r\n\r\n    /*******************************************************************/\r\n    /**********          Setup Vertex Array Object             *********/\r\n    /*******************************************************************/\r\n    const positionAttributeLocation = gl.getAttribLocation(program,\"a_position\");\r\n    const colorAttributeLocation = gl.getAttribLocation(program,\"a_color\");\r\n    \r\n    const vao = gl.createVertexArray();\r\n    gl.bindVertexArray(vao);\r\n    gl.enableVertexAttribArray(positionAttributeLocation);\r\n    let size = 2;\r\n    let type = gl.FLOAT;\r\n    let normalize = false;\r\n    let stride = 20;\r\n    let offset = 0;\r\n\r\n    gl.vertexAttribPointer(positionAttributeLocation,size, type, normalize, stride, offset);\r\n\r\n    gl.enableVertexAttribArray(positionAttributeLocation);\r\n    size = 3;\r\n    type = gl.FLOAT;\r\n    normalize = false;\r\n    stride = 20;\r\n    offset = 8;\r\n    \r\n    gl.vertexAttribPointer(colorAttributeLocation,size, type, normalize, stride, offset);\r\n    gl.enableVertexAttribArray(colorAttributeLocation);\r\n    \r\n    \r\n    /*******************************************************************/\r\n    /**********             Create Index Buffer               *********/\r\n    /*******************************************************************/\r\n    const indices:number[] = [\r\n        0,1,2,\r\n        3,1,2,\r\n    ];\r\n    const indexBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\r\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,new Uint16Array(indices), gl.STATIC_DRAW);\r\n\r\n    resizeCanvasToDisplaySize(canvas);\r\n\r\n    \r\n    /*******************************************************************/\r\n    /**********                    DRAW                        *********/\r\n    /*******************************************************************/ \r\n    gl.viewport(0,0,gl.canvas.width, gl.canvas.height);\r\n    gl.clearColor(1.0,1.0,1.0,1.0); \r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    gl.useProgram(program); \r\n\r\n    const primitiveType = gl.TRIANGLES; \r\n    const drawOffset = 0;\r\n    const count = 6;\r\n    let indexType = gl.UNSIGNED_SHORT;\r\n    gl.drawElements(primitiveType, count, indexType, drawOffset);\r\n}\r\n\r\nexport default webGL2DrawSquareWithIndexedVertices;","export const vertexShaderSource:string = `#version 300 es\r\nin vec4 a_position;\r\nin vec4 a_color;\r\nout vec4 out_color;\r\nvoid main(){\r\n    gl_Position = a_position;\r\n    out_color = a_color;\r\n}\r\n`;\r\n\r\nexport const fragmentShaderSource:string = `#version 300 es\r\nprecision highp float;\r\n\r\nin vec4 out_color;\r\nout vec4 outColor;\r\nvoid main(){\r\n    outColor = out_color;\r\n}\r\n`","export default \"// vertex shader\\n\\nstruct Uniforms {\\n    mvpMatrix : mat4x4<f32>\\n};\\n@binding(0) @group(0) var<uniform> uniforms : Uniforms;\\n\\nstruct Output {\\n    @builtin(position) Position : vec4<f32>,\\n    @location(0) vColor : vec4<f32>\\n};\\n\\n@vertex\\nfn vs_main(@location(0) pos: vec4<f32>, @location(1) color: vec4<f32>) -> Output {\\n    var output: Output;\\n    output.Position = uniforms.mvpMatrix * pos;\\n    output.vColor = color;\\n    return output;\\n}\\n\\n// fragment shader\\n\\n @fragment\\nfn fs_main(@location(0) vColor: vec4<f32>) -> @location(0) vec4<f32> {\\n    return vColor;\\n}\"","export const cubeUniqueVertexData = [\r\n    // position,   color\r\n    -1, -1,  1,    0, 0, 1,     // vertex a, index 0\r\n     1, -1,  1,    1, 0, 1,     // vertex b, index 1\r\n     1,  1,  1,    1, 1, 1,     // vertex c, index 2\r\n    -1,  1,  1,    0, 1, 1,     // vertex d, index 3\r\n    -1, -1, -1,    0, 0, 0,     // vertex e, index 4\r\n     1, -1, -1,    1, 0, 0,     // vertex f, index 5\r\n     1,  1, -1,    1, 1, 0,     // vertex g, index 6\r\n    -1,  1, -1,    0, 1, 0,     // vertex h, index 7 \r\n];\r\n\r\nexport const cubeIndexData = [\r\n    // front\r\n    0, 1, 2, 2, 3, 0,\r\n\r\n    // right\r\n    1, 5, 6, 6, 2, 1,\r\n\r\n    // back\r\n    4, 7, 6, 6, 5, 4,\r\n\r\n    // left\r\n    0, 3, 7, 7, 4, 0,\r\n\r\n    // top\r\n    3, 2, 6, 6, 7, 3,\r\n\r\n    // bottom\r\n    0, 4, 5, 5, 1, 0\r\n];\r\n\r\nexport const cubeCompleteVertexData = [\r\n    // front\r\n    -1, -1,  1,  \r\n     1, -1,  1,  \r\n     1,  1,  1,\r\n     1,  1,  1,\r\n    -1,  1,  1,\r\n    -1, -1,  1,\r\n\r\n    // right\r\n     1, -1,  1,\r\n     1, -1, -1,\r\n     1,  1, -1,\r\n     1,  1, -1,\r\n     1,  1,  1,\r\n     1, -1,  1,\r\n\r\n    // back\r\n    -1, -1, -1,\r\n    -1,  1, -1,\r\n     1,  1, -1,\r\n     1,  1, -1,\r\n     1, -1, -1,\r\n    -1, -1, -1,\r\n\r\n    // left\r\n    -1, -1,  1,\r\n    -1,  1,  1,\r\n    -1,  1, -1,\r\n    -1,  1, -1,\r\n    -1, -1, -1,\r\n    -1, -1,  1,\r\n\r\n    // top\r\n    -1,  1,  1,\r\n     1,  1,  1,\r\n     1,  1, -1,\r\n     1,  1, -1,\r\n    -1,  1, -1,\r\n    -1,  1,  1,\r\n\r\n    // bottom\r\n    -1, -1,  1,\r\n    -1, -1, -1,\r\n     1, -1, -1,\r\n     1, -1, -1,\r\n     1, -1,  1,\r\n    -1, -1,  1\r\n];\r\n\r\nexport const cubeTextureCoord = [\r\n    // front\r\n    0, 1,  \r\n    1, 1,  \r\n    1,  0, \r\n    1,  0,\r\n    0,  0,\r\n    0, 1,\r\n\r\n    // right\r\n    0, 1,  \r\n    1, 1,  \r\n    1,  0, \r\n    1,  0,\r\n    0,  0,\r\n    0, 1,\r\n\r\n    // back\r\n    1, 1,  \r\n    1, 0,  \r\n    0,  0, \r\n    0,  0,\r\n    0,  1,\r\n    1, 1,\r\n\r\n    // left\r\n    1, 1,  \r\n    1, 0,  \r\n    0,  0, \r\n    0,  0,\r\n    0,  1,\r\n    1, 1,\r\n\r\n    // top\r\n    0, 1,  \r\n    1, 1,  \r\n    1,  0, \r\n    1,  0,\r\n   0,  0,\r\n   0, 1,\r\n\r\n    // bottom\r\n    1, 1,  \r\n    1, 0,  \r\n    0,  0, \r\n    0,  0,\r\n    0,  1,\r\n    1, 1,\r\n];\r\n\r\nexport const cubeFaceColorData = [\r\n    // front - blue\r\n    0, 0, 1,\r\n    0, 0, 1,\r\n    0, 0, 1,\r\n    0, 0, 1,\r\n    0, 0, 1,\r\n    0, 0, 1,\r\n\r\n    // right - red\r\n    1, 0, 0,\r\n    1, 0, 0,\r\n    1, 0, 0,\r\n    1, 0, 0,\r\n    1, 0, 0,\r\n    1, 0, 0,\r\n\r\n    //back - yellow\r\n    1, 1, 0,\r\n    1, 1, 0,\r\n    1, 1, 0,\r\n    1, 1, 0,\r\n    1, 1, 0,\r\n    1, 1, 0,\r\n\r\n    //left - aqua\r\n    0, 1, 1,\r\n    0, 1, 1,\r\n    0, 1, 1,\r\n    0, 1, 1,\r\n    0, 1, 1,\r\n    0, 1, 1,\r\n\r\n    // top - green\r\n    0, 1, 0,\r\n    0, 1, 0,\r\n    0, 1, 0,\r\n    0, 1, 0,\r\n    0, 1, 0,\r\n    0, 1, 0,\r\n\r\n    // bottom - fuchsia\r\n    1, 0, 1,\r\n    1, 0, 1,\r\n    1, 0, 1,\r\n    1, 0, 1,\r\n    1, 0, 1,\r\n    1, 0, 1\r\n];","/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;","import {vec3, mat4} from 'gl-matrix';\r\n\r\nexport const createViewProjectionPerspective = (respectRatio = 1.0, cameraPosition:vec3 = [0, 0, 4], lookDirection:vec3 = [0, 0, 0], \r\n    upDirection:vec3 = [0, 1, 0]) => {\r\n\r\n    const viewMatrix = mat4.create();\r\n    const projectionMatrix = mat4.create();       \r\n    const viewProjectionMatrix = mat4.create();\r\n    mat4.perspective(projectionMatrix, 2*Math.PI/5, respectRatio, 0.1, 1000.0);\r\n\r\n    mat4.lookAt(viewMatrix, cameraPosition, lookDirection, upDirection);\r\n    mat4.multiply(viewProjectionMatrix, projectionMatrix, viewMatrix);\r\n\r\n    const cameraOption = {\r\n        eye: cameraPosition,\r\n        center: lookDirection,\r\n        zoomMax: 100,\r\n        zoomSpeed: 2\r\n    };\r\n\r\n    return {\r\n        viewMatrix,\r\n        projectionMatrix,\r\n        viewProjectionMatrix,\r\n        cameraOption\r\n    }\r\n};\r\n\r\nexport const CreateViewProjectionOrthographic = (aspectRatio = 1.0, api:HTMLCanvasElement,cameraPosition:vec3 = [2, 2, 4], lookDirection:vec3 = [0, 0, 0], \r\n    upDirection:vec3 = [0, 1, 0]) => {\r\n\r\n    const viewMatrix = mat4.create();\r\n    const projectionMatrix = mat4.create();       \r\n    const viewProjectionMatrix = mat4.create();\r\n    mat4.ortho(projectionMatrix,0,api.clientWidth,api.clientHeight,0,400,-400)\r\n\r\n    mat4.lookAt(viewMatrix, cameraPosition, lookDirection, upDirection);\r\n    mat4.multiply(viewProjectionMatrix, projectionMatrix, viewMatrix);\r\n\r\n    const cameraOption = {\r\n        eye: cameraPosition,\r\n        center: lookDirection,\r\n        zoomMax: 100,\r\n        zoomSpeed: 2\r\n    };\r\n\r\n    return {\r\n        viewMatrix,\r\n        projectionMatrix,\r\n        viewProjectionMatrix,\r\n        cameraOption\r\n    }\r\n};","import { mat4, vec3 } from \"gl-matrix\";\r\n\r\nexport const createTransforms = (modelMat:mat4, translation:vec3 = [0,0,0], rotation:vec3 = [0,0,0], scaling:vec3 = [1,1,1]) => {\r\n    const rotateXMat = mat4.create();\r\n    const rotateYMat = mat4.create();\r\n    const rotateZMat = mat4.create();   \r\n    const translateMat = mat4.create();\r\n    const scaleMat = mat4.create();\r\n\r\n    //perform individual transformations\r\n    mat4.fromTranslation(translateMat, translation);\r\n    mat4.fromXRotation(rotateXMat, rotation[0]);\r\n    mat4.fromYRotation(rotateYMat, rotation[1]);\r\n    mat4.fromZRotation(rotateZMat, rotation[2]);\r\n    mat4.fromScaling(scaleMat, scaling);\r\n\r\n    //combine all transformation matrices together to form a final transform matrix: modelMat\r\n    mat4.multiply(modelMat, rotateXMat, scaleMat);\r\n    mat4.multiply(modelMat, rotateYMat, modelMat);        \r\n    mat4.multiply(modelMat, rotateZMat, modelMat);\r\n    mat4.multiply(modelMat, translateMat, modelMat);\r\n};","export const vertexShaderSource:string = `#version 300 es\nin vec4 a_position;\nin vec4 a_color;\nuniform mat4 u_matrix;\nout vec4 out_color;\nvoid main(){\n    gl_Position = u_matrix * a_position;\n    out_color = a_color;\n}\n`;\n\nexport const fragmentShaderSource:string = `#version 300 es\nprecision highp float;\n\nin vec4 out_color;\nout vec4 outColor;\nvoid main(){\n    outColor = out_color;\n}\n`","export const createGL2Buffer = (gl:WebGL2RenderingContext, data:number[], bufferType:number, drawType:number ) => {\r\n    const buffer = gl.createBuffer();\r\n    gl.bindBuffer(bufferType, buffer);\r\n    gl.bufferData(bufferType, bufferType===gl.ARRAY_BUFFER?new Float32Array(data):new Uint16Array(data), drawType);\r\n    return buffer;\r\n}","export const setGL2Attribute = (gl:WebGL2RenderingContext,program: WebGLProgram,attribute:string, size:number, type:number, normalize: boolean, stride:number, offset:number) => {\r\n    const attributeLocation = gl.getAttribLocation(program,attribute);\r\n    gl.vertexAttribPointer(attributeLocation,size, type, normalize, stride, offset);\r\n    gl.enableVertexAttribArray(attributeLocation);\r\n}","import { vertexShaderSource, fragmentShaderSource } from \"./shader.cube-with-distinct-vertex-colors.webgl\"\nimport { createShader, createProgram, initialiseGL, createGL2Buffer, setGL2Attribute } from \"../../../helpers/webgl2\"\nimport {createTransforms, createViewProjectionPerspective, cubeIndexData, cubeUniqueVertexData, resizeCanvasToDisplaySize} from \"../../../helpers/common\"\nimport { mat4 } from \"gl-matrix\";\nconst webGL2DrawCubeWithDistinctVertexColors = () => {\n    /*******************************************************************/\n    /****************           Initialise GL           ****************/\n    /*******************************************************************/\n    const obj = initialiseGL();\n    const gl = obj[0] as WebGL2RenderingContext;\n    const canvas = obj[1] as HTMLCanvasElement;\n    \n    /*******************************************************************/\n    /**************** Create Shaders and Shader Program ****************/\n    /*******************************************************************/\n    const vertexShader:WebGLShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource) as WebGLShader;\n    const fragmentShader:WebGLShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource) as WebGLShader;\n    const program:WebGLProgram = createProgram(gl,fragmentShader,vertexShader) as WebGLProgram;\n    gl.useProgram(program); \n    \n    /*******************************************************************/\n    /**********Create Vertex Buffer & Store Vertices & Colors***********/\n    /*******************************************************************/\n    const cubeVertices:number[] = cubeUniqueVertexData;\n    createGL2Buffer(gl,cubeVertices,gl.ARRAY_BUFFER,gl.STATIC_DRAW);\n\n\n    /*******************************************************************/\n    /**********          Setup Vertex Array Object             *********/\n    /*******************************************************************/\n    const vao = gl.createVertexArray();\n    gl.bindVertexArray(vao);\n    setGL2Attribute(gl,program,\"a_position\",3,gl.FLOAT,false,24,0);\n    setGL2Attribute(gl,program,\"a_color\",3,gl.FLOAT,false,24,12);\n        \n    \n    /*******************************************************************/\n    /**********             Create Index Buffer               *********/\n    /*******************************************************************/\n    const cubeIndices = cubeIndexData;\n    createGL2Buffer(gl, cubeIndices, gl.ELEMENT_ARRAY_BUFFER, gl.STATIC_DRAW);\n    resizeCanvasToDisplaySize(canvas);\n\n    /*******************************************************************/\n    /**********     Generate Model View Projection Matrix      *********/\n    /*******************************************************************/\n    const modelMatrix = mat4.create();\n    const mvpMatrix = mat4.create();\n    let vpMatrix = mat4.create();\n    const vp = createViewProjectionPerspective(canvas.width/canvas.height);\n    vpMatrix = vp.viewProjectionMatrix;\n\n    createTransforms(modelMatrix,[0,0,-2],[-2.44,0.46,0]);\n    mat4.multiply(mvpMatrix, vpMatrix, modelMatrix);\n    const mvpMatrixLocation = gl.getUniformLocation(program,\"u_matrix\");\n    gl.uniformMatrix4fv(mvpMatrixLocation,false, mvpMatrix);\n    \n    /*******************************************************************/\n    /**********                    DRAW                        *********/\n    /*******************************************************************/ \n    gl.viewport(0,0,gl.canvas.width, gl.canvas.height);\n    gl.clearColor(1.0,1.0,1.0,1.0); \n    gl.enable(gl.DEPTH_TEST);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    \n\n    const primitiveType = gl.TRIANGLES; \n    const drawOffset = 0;\n    const count = cubeIndices.length;\n    let indexType = gl.UNSIGNED_SHORT;\n    gl.drawElements(primitiveType, count, indexType, drawOffset);\n}\n\nexport default webGL2DrawCubeWithDistinctVertexColors;","export default \"// vertex shader\\n\\nstruct Uniforms {\\n    mvpMatrix : mat4x4<f32>\\n};\\n@binding(0) @group(0) var<uniform> uniforms : Uniforms;\\n\\nstruct Output {\\n    @builtin(position) Position : vec4<f32>,\\n    @location(0) vColor : vec4<f32>\\n};\\n\\n@vertex\\nfn vs_main(@location(0) pos: vec4<f32>, @location(1) color: vec4<f32>) -> Output {\\n    var output: Output;\\n    output.Position = uniforms.mvpMatrix * pos;\\n    output.vColor = color;\\n    return output;\\n}\\n\\n// fragment shader\\n\\n @fragment\\nfn fs_main(@location(0) vColor: vec4<f32>) -> @location(0) vec4<f32> {\\n    return vColor;\\n}\"","export const vertexShaderSource:string = `#version 300 es\nin vec4 a_position;\nin vec4 a_color;\nuniform mat4 u_matrix;\nout vec4 out_color;\nvoid main(){\n    gl_Position = u_matrix * a_position;\n    out_color = a_color;\n}\n`;\n\nexport const fragmentShaderSource:string = `#version 300 es\nprecision highp float;\n\nin vec4 out_color;\nout vec4 outColor;\nvoid main(){\n    outColor = out_color;\n}\n`","import { vertexShaderSource, fragmentShaderSource } from \"./shader.cube-with-distinct-face-colors.webgl\"\nimport { createShader, createProgram, initialiseGL, createGL2Buffer, setGL2Attribute } from \"../../../helpers/webgl2\"\nimport {createTransforms, createViewProjectionPerspective, cubeIndexData, cubeCompleteVertexData, resizeCanvasToDisplaySize, cubeFaceColorData} from \"../../../helpers/common\"\nimport { mat4 } from \"gl-matrix\";\nconst webGL2DrawCubeWithDistinctFaceColors = () => {\n    /*******************************************************************/\n    /****************           Initialise GL           ****************/\n    /*******************************************************************/\n    const obj = initialiseGL();\n    const gl = obj[0] as WebGL2RenderingContext;\n    const canvas = obj[1] as HTMLCanvasElement;\n    \n    /*******************************************************************/\n    /**************** Create Shaders and Shader Program ****************/\n    /*******************************************************************/\n    const vertexShader:WebGLShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource) as WebGLShader;\n    const fragmentShader:WebGLShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource) as WebGLShader;\n    const program:WebGLProgram = createProgram(gl,fragmentShader,vertexShader) as WebGLProgram;\n    gl.useProgram(program); \n    \n    /*******************************************************************/\n    /**********       Create Buffers & Set Attributes        ***********/\n    /*******************************************************************/\n    const vao = gl.createVertexArray();\n    gl.bindVertexArray(vao);\n    const cubeVertices:number[] = cubeCompleteVertexData;\n\n    createGL2Buffer(gl,cubeVertices,gl.ARRAY_BUFFER,gl.STATIC_DRAW);\n    setGL2Attribute(gl,program,\"a_position\",3,gl.FLOAT,false,12,0);\n\n    const cubeColors:number[] = cubeFaceColorData;\n    createGL2Buffer(gl,cubeColors, gl.ARRAY_BUFFER, gl.STATIC_DRAW);\n    setGL2Attribute(gl,program,\"a_color\",3,gl.FLOAT,false,12,0);\n\n    resizeCanvasToDisplaySize(canvas);\n\n    /*******************************************************************/\n    /**********     Generate Model View Projection Matrix      *********/\n    /*******************************************************************/\n    const modelMatrix = mat4.create();\n    const mvpMatrix = mat4.create();\n    let vpMatrix = mat4.create();\n    const vp = createViewProjectionPerspective(canvas.width/canvas.height);\n    vpMatrix = vp.viewProjectionMatrix;\n\n    createTransforms(modelMatrix,[0,0,-2],[-2.44,0.46,0]);\n    mat4.multiply(mvpMatrix, vpMatrix, modelMatrix);\n    const mvpMatrixLocation = gl.getUniformLocation(program,\"u_matrix\");\n    gl.uniformMatrix4fv(mvpMatrixLocation,false, mvpMatrix);\n    \n    /*******************************************************************/\n    /**********                    DRAW                        *********/\n    /*******************************************************************/ \n    gl.viewport(0,0,gl.canvas.width, gl.canvas.height);\n    gl.clearColor(1.0,1.0,1.0,1.0); \n    gl.enable(gl.DEPTH_TEST);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    \n    const primitiveType = gl.TRIANGLES; \n    const drawOffset = 0;\n    gl.drawArrays(primitiveType, drawOffset, cubeVertices.length);\n\n}\n\nexport default webGL2DrawCubeWithDistinctFaceColors;","export default \"// vertex shader\\n\\nstruct Uniforms {\\n    mvpMatrix : mat4x4<f32>\\n};\\n@binding(0) @group(0) var<uniform> uniforms : Uniforms;\\n\\nstruct Output {\\n    @builtin(position) Position : vec4<f32>,\\n    @location(0) vTextureCoord : vec2<f32>\\n};\\n\\n@vertex\\nfn vs_main(@location(0) pos: vec4<f32>, @location(1) textureCoord: vec2<f32>) -> Output {\\n    var output: Output;\\n    output.Position = uniforms.mvpMatrix * pos;\\n    output.vTextureCoord = textureCoord;\\n    return output;\\n}\\n\\n// fragment shader\\n@binding(1) @group(0) var textureSampler : sampler;\\n@binding(2) @group(0) var textureData : texture_2d<f32>;\\n @fragment\\nfn fs_main(@location(0) vTextureCoord: vec2<f32>) -> @location(0) vec4<f32> {\\n    let color: vec4<f32> = (textureSample(textureData, textureSampler, vTextureCoord)).rgba;\\n    return color;\\n}\"","import { vertexShaderSource, fragmentShaderSource } from \"./shader.cube-with-texture.webgl\"\nimport { createShader, createProgram, initialiseGL, createGL2Buffer, setGL2Attribute } from \"../../../helpers/webgl2\"\nimport {createTransforms, createViewProjectionPerspective, cubeTextureCoord, cubeCompleteVertexData, resizeCanvasToDisplaySize, cubeFaceColorData} from \"../../../helpers/common\"\nimport { mat4 } from \"gl-matrix\";\nconst webGL2DrawCubeWithTexture = () => {\n    /*******************************************************************/\n    /****************           Initialise GL           ****************/\n    /*******************************************************************/\n    const obj = initialiseGL();\n    const gl = obj[0] as WebGL2RenderingContext;\n    const canvas = obj[1] as HTMLCanvasElement;\n    \n    /*******************************************************************/\n    /**************** Create Shaders and Shader Program ****************/\n    /*******************************************************************/\n    const vertexShader:WebGLShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource) as WebGLShader;\n    const fragmentShader:WebGLShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource) as WebGLShader;\n    const program:WebGLProgram = createProgram(gl,fragmentShader,vertexShader) as WebGLProgram;\n    gl.useProgram(program); \n    \n    /*******************************************************************/\n    /**********       Create Buffers & Set Attributes        ***********/\n    /*******************************************************************/\n    const vao = gl.createVertexArray();\n    gl.bindVertexArray(vao);\n    const cubeVertices:number[] = cubeCompleteVertexData;\n\n    createGL2Buffer(gl,cubeVertices,gl.ARRAY_BUFFER,gl.STATIC_DRAW);\n    setGL2Attribute(gl,program,\"a_position\",3,gl.FLOAT,false,12,0);\n\n\n    createGL2Buffer(gl,cubeTextureCoord,gl.ARRAY_BUFFER,gl.STATIC_DRAW);\n    setGL2Attribute(gl, program, \"a_texcoord\",2, gl.FLOAT, true,0,0);\n\n    resizeCanvasToDisplaySize(canvas);\n\n    \n    /*******************************************************************/\n    /**********                  Create Texture                *********/\n    /*******************************************************************/\n    const texture = gl.createTexture();\n\n    // use texture unit 0\n    gl.activeTexture(gl.TEXTURE0 + 0);\n  \n    // bind to the TEXTURE_2D bind point of texture unit 0\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n  \n    // Fill the texture with a 1x1 blue pixel.\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE,\n                  new Uint8Array([0, 255, 0, 255]));\n  \n    // Asynchronously load an image\n    var image = new Image();\n    image.crossOrigin = \"anonymous\"\n    image.src = \"./assets/webgl_single_texture.png\";\n    image.addEventListener('load', function() {\n      // Now that the image has loaded make copy it to the texture.\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n      gl.generateMipmap(gl.TEXTURE_2D);\n    });\n\n\n    /*******************************************************************/\n    /**********     Generate Model View Projection Matrix      *********/\n    /*******************************************************************/\n    const modelMatrix = mat4.create();\n    const mvpMatrix = mat4.create();\n    let vpMatrix = mat4.create();\n    const vp = createViewProjectionPerspective(canvas.width/canvas.height);\n    vpMatrix = vp.viewProjectionMatrix;\n\n    createTransforms(modelMatrix,[0,0,-2],[-2.44,0.46,0]);\n    mat4.multiply(mvpMatrix, vpMatrix, modelMatrix);\n    const mvpMatrixLocation = gl.getUniformLocation(program,\"u_matrix\");\n    gl.uniformMatrix4fv(mvpMatrixLocation,false, mvpMatrix);\n    \n\n    /*******************************************************************/\n    /**********                    DRAW                        *********/\n    /*******************************************************************/ \n    const drawScene = () => {\n        gl.viewport(0,0,gl.canvas.width, gl.canvas.height);\n        gl.clearColor(0,0,0,0); \n        gl.enable(gl.DEPTH_TEST);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        gl.enable(gl.CULL_FACE);\n        const primitiveType = gl.TRIANGLES; \n        const drawOffset = 0;\n        gl.drawArrays(primitiveType, drawOffset, cubeVertices.length);\n        requestAnimationFrame(drawScene);\n    }\n\n    requestAnimationFrame(drawScene);\n\n}\n\nexport default webGL2DrawCubeWithTexture;","export const vertexShaderSource:string = `#version 300 es\nin vec4 a_position;\nin vec2 a_texcoord;\nuniform mat4 u_matrix;\n\nout vec2 v_texcoord;\nvoid main(){\n    gl_Position = u_matrix * a_position;\n    v_texcoord = a_texcoord;\n}\n`;\n\nexport const fragmentShaderSource:string = `#version 300 es\nprecision highp float;\n\nin vec2 v_texcoord;\nout vec4 outColor;\n\nuniform sampler2D u_texture;\nvoid main(){\n    outColor = texture(u_texture, v_texcoord);\n}\n`","import { vertexShaderSource, fragmentShaderSource } from \"./shader.interactive-cube.webgl\"\nimport { vertexShaderSource as vertexShaderSourceVertices, fragmentShaderSource as fragmentShaderSourceVertices} from \"../../cube-with-distinct-vertex-colors/webgl2/shader.cube-with-distinct-vertex-colors.webgl\"\nimport { vertexShaderSource as vertexShaderSourceFaces, fragmentShaderSource as fragmentShaderSourceFaces} from \"../../cube-with-distinct-face-colors/webgl2/shader.cube-with-distinct-face-colors.webgl\"\nimport { createShader, createProgram, initialiseGL, createGL2Buffer, setGL2Attribute } from \"../../../helpers/webgl2\"\nimport {createTransforms, createViewProjectionPerspective, cubeTextureCoord, cubeCompleteVertexData, resizeCanvasToDisplaySize, cubeFaceColorData, cubeUniqueVertexData, cubeIndexData} from \"../../../helpers/common\"\nimport { mat4 } from \"gl-matrix\";\nconst webGL2DrawCubeAnimated = () => {\n    /*******************************************************************/\n    /****************           Initialise GL           ****************/\n    /*******************************************************************/\n    const obj = initialiseGL();\n    const gl = obj[0] as WebGL2RenderingContext;\n    const canvas = obj[1] as HTMLCanvasElement;\n    \n    let vertexShader:WebGLShader;\n    let fragmentShader:WebGLShader;\n    let program:WebGLProgram;\n    let drawSize:number;\n    let cubeVertices:number[]\n    const vao = gl.createVertexArray();\n    gl.bindVertexArray(vao);\n\n    let material = \"texture\";\n\n    const setCubeBasedOnMaterial = () => {\n      switch (material){\n        case \"texture\":\n              /*******************************************************************/\n              /**************** Create Shaders and Shader Program ****************/\n              /*******************************************************************/\n              vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource) as WebGLShader;\n              fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource) as WebGLShader;\n              program = createProgram(gl,fragmentShader,vertexShader) as WebGLProgram;\n              gl.useProgram(program);\n              /*******************************************************************/\n              /****************           Create Buffers         ****************/\n              /*******************************************************************/\n              cubeVertices = cubeCompleteVertexData;\n              drawSize=cubeVertices.length;\n              createGL2Buffer(gl,cubeVertices,gl.ARRAY_BUFFER,gl.STATIC_DRAW);\n              setGL2Attribute(gl,program,\"a_position\",3,gl.FLOAT,false,12,0);\n              createGL2Buffer(gl,cubeTextureCoord,gl.ARRAY_BUFFER,gl.STATIC_DRAW);\n              setGL2Attribute(gl, program, \"a_texcoord\",2, gl.FLOAT, true,0,0);\n              /*******************************************************************/\n              /**********                  Create Texture                *********/\n              /*******************************************************************/\n              const texture = gl.createTexture();\n              gl.activeTexture(gl.TEXTURE0 + 0);\n              gl.bindTexture(gl.TEXTURE_2D, texture);\n              gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE,new Uint8Array([0, 255, 0, 255]));\n              const image = new Image();\n              image.crossOrigin = \"anonymous\"\n              image.src = \"./assets/webgl_single_texture.png\";\n              image.addEventListener('load', function() {\n                gl.bindTexture(gl.TEXTURE_2D, texture);\n                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n                gl.generateMipmap(gl.TEXTURE_2D);\n                requestAnimationFrame(drawScene)\n              });\n              break;\n        case \"distinct-vertex-colors\":\n              /*******************************************************************/\n              /**************** Create Shaders and Shader Program ****************/\n              /*******************************************************************/\n              vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSourceVertices) as WebGLShader;\n              fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSourceVertices) as WebGLShader;\n              program = createProgram(gl,fragmentShader,vertexShader) as WebGLProgram;\n              gl.useProgram(program);\n              /*******************************************************************/\n              /****************           Create Buffers         ****************/\n              /*******************************************************************/\n              cubeVertices = cubeUniqueVertexData;\n              drawSize=cubeIndexData.length;\n              createGL2Buffer(gl,cubeVertices,gl.ARRAY_BUFFER,gl.STATIC_DRAW);\n              createGL2Buffer(gl, cubeIndexData, gl.ELEMENT_ARRAY_BUFFER, gl.STATIC_DRAW);\n              setGL2Attribute(gl,program,\"a_position\",3,gl.FLOAT,false,24,0);\n              setGL2Attribute(gl,program,\"a_color\",3,gl.FLOAT,false,24,12);\n              break;\n        case \"distinct-face-colors\":\n              /*******************************************************************/\n              /**************** Create Shaders and Shader Program ****************/\n              /*******************************************************************/\n              vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSourceFaces) as WebGLShader;\n              fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSourceFaces) as WebGLShader;\n              program = createProgram(gl,fragmentShader,vertexShader) as WebGLProgram;\n              gl.useProgram(program);\n              /*******************************************************************/\n              /****************           Create Buffers         ****************/\n              /*******************************************************************/\n              drawSize=cubeCompleteVertexData.length;\n              createGL2Buffer(gl,cubeCompleteVertexData,gl.ARRAY_BUFFER,gl.STATIC_DRAW);\n              setGL2Attribute(gl,program,\"a_position\",3,gl.FLOAT,false,12,0);\n\n              createGL2Buffer(gl,cubeFaceColorData, gl.ARRAY_BUFFER, gl.STATIC_DRAW);\n              setGL2Attribute(gl,program,\"a_color\",3,gl.FLOAT,false,12,0);\n          break;\n        default :\n          return 0;\n      }\n    }\n\n    setCubeBasedOnMaterial();\n    \n    /*******************************************************************/\n    /**********                 Clear Screen                 ***********/\n    /*******************************************************************/\n    resizeCanvasToDisplaySize(canvas);\n\n    /*******************************************************************/\n    /**********     Generate Model View Projection Matrix      *********/\n    /*******************************************************************/\n    const modelMatrix = mat4.create();\n    const mvpMatrix = mat4.create();\n    let vpMatrix = mat4.create();\n    const vp = createViewProjectionPerspective(canvas.width/canvas.height);\n    vpMatrix = vp.viewProjectionMatrix;\n\n    /*******************************************************************/\n    /********** Create Transform Variables and Change Listeners*********/\n    /*******************************************************************/\n    let tX = 0;\n    let tY = 0;\n    let tZ = 0;\n    let sX = 1;\n    let sY = 1;\n    let sZ = 1;\n    let rX = 0;\n    let rY = 0;\n    let rZ = 0;\n    document.getElementById(\"translate-x\")?.addEventListener(\"input\", (e:any)=>{\n      tX = e?.target?.value;\n      // drawScene();\n    })  \n    document.getElementById(\"translate-y\")?.addEventListener(\"input\", (e:any)=>{\n      tY = e?.target?.value;\n      // drawScene();\n    })  \n    document.getElementById(\"translate-z\")?.addEventListener(\"input\", (e:any)=>{\n      tZ = e?.target?.value;\n      // drawScene();\n    })  \n    document.getElementById(\"scale-x\")?.addEventListener(\"input\", (e:any)=>{\n      sX = e?.target?.value;\n      // drawScene();\n    })  \n    document.getElementById(\"scale-y\")?.addEventListener(\"input\", (e:any)=>{\n      sY = e?.target?.value;\n      // drawScene();\n    })  \n    document.getElementById(\"scale-z\")?.addEventListener(\"input\", (e:any)=>{\n      sZ = e?.target?.value;\n      // drawScene();\n    })  \n    document.getElementById(\"rotate-x\")?.addEventListener(\"input\", (e:any)=>{\n      rX = e?.target?.value * (Math.PI/180);\n      // drawScene();\n    })  \n    document.getElementById(\"rotate-y\")?.addEventListener(\"input\", (e:any)=>{\n      rY = e?.target?.value * (Math.PI/180);\n      // drawScene();\n    })  \n    document.getElementById(\"rotate-z\")?.addEventListener(\"input\", (e:any)=>{\n      rZ = e?.target?.value * (Math.PI/180);\n      // drawScene();\n    })  \n    document.getElementById(\"material\")?.addEventListener(\"change\", (e:any)=>{\n      material = e?.target?.value;\n      setCubeBasedOnMaterial();\n      // drawScene();\n    })  \n    window.addEventListener('resize', () => resizeCanvasToDisplaySize(canvas));\n\n    /*******************************************************************/\n    /**********                    DRAW                        *********/\n    /*******************************************************************/\n    let fpsContainer:HTMLElement = document.createElement('div');\n    fpsContainer = document.getElementById(\"fps\") as HTMLElement;\n    let fps = 1;\n    const times:any = [];\n    const drawScene = (timestamp:any) => {\n      while (times.length > 0 && times[0] <= timestamp - 1000) {\n        times.shift();\n      }\n      times.push(timestamp);\n      fps = times.length;\n      fpsContainer.innerText = fps.toString();\n\n      createTransforms(modelMatrix,[tX,tY,tZ],[rX,rY,rZ], [sX,sY,sZ]);\n      mat4.multiply(mvpMatrix, vpMatrix, modelMatrix);\n      const mvpMatrixLocation = gl.getUniformLocation(program,\"u_matrix\");\n      gl.uniformMatrix4fv(mvpMatrixLocation,false, mvpMatrix);\n      gl.clearColor(0,0,0,0); \n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n      gl.viewport(0,0,gl.canvas.width, gl.canvas.height);\n      gl.enable(gl.DEPTH_TEST);\n      gl.enable(gl.CULL_FACE);\n      const primitiveType = gl.TRIANGLES; \n      const drawOffset = 0;\n\n      if(material==\"distinct-vertex-colors\"){\n        let indexType = gl.UNSIGNED_SHORT;\n        gl.drawElements(primitiveType, drawSize, indexType, drawOffset);\n      }\n      else{\n        gl.drawArrays(primitiveType, drawOffset, drawSize);\n      }\n      requestAnimationFrame(drawScene);\n    }\n    requestAnimationFrame(drawScene)\n\n}\n\nexport default webGL2DrawCubeAnimated;","export const vertexShaderSource:string = `#version 300 es\nin vec4 a_position;\nin vec2 a_texcoord;\nuniform mat4 u_matrix;\n\nout vec2 v_texcoord;\nvoid main(){\n    gl_Position = u_matrix * a_position;\n    v_texcoord = a_texcoord;\n}\n`;\n\nexport const fragmentShaderSource:string = `#version 300 es\nprecision highp float;\n\nin vec2 v_texcoord;\nout vec4 outColor;\n\nuniform sampler2D u_texture;\nvoid main(){\n    outColor = texture(u_texture, v_texcoord);\n}\n`","import { webgl2DrawTriangle } from \"./examples/triangle/webgl2\";\nimport { webgpuDrawTriangle } from \"./examples/triangle/webgpu\"\nimport { webGL2DrawSquare } from \"./examples/square/webgl2\";\nimport { webGPUDrawSquare } from \"./examples/square/webgpu\";\nimport {webGPUDrawSquareWithIndexedVertices} from \"./examples/square-with-indexed-vertices/webgpu\";\nimport {webGL2DrawSquareWithIndexedVertices} from \"./examples/square-with-indexed-vertices/webgl2\";\nimport {webGPUDrawCubeWithDistinctVertexColors, webGL2DrawCubeWithDistinctVertexColors} from \"./examples/cube-with-distinct-vertex-colors\";\nimport { webGPUDrawCubeWithDistinctFaceColors, webGL2DrawCubeWithDistinctFaceColors } from \"./examples/cube-with-distinct-face-colors\";\nimport { webGPUDrawCubeWithTexture, webGL2DrawCubeWithTexture } from \"./examples/cube-with-texture\";\nimport { webGPUDrawInteractiveCube, webGL2DrawInteractiveCube } from \"./examples/interactive-cube\";\nconst removeOtherScene = (sceneType:string) => {\n    const sceneParent = document.getElementById(sceneType) as HTMLElement;\n    sceneParent?.childNodes.forEach((node)=>{\n        if(node.nodeName===\"CANVAS\"){\n            node.remove()\n        }\n    })\n}\nconst setThisScene = (sceneType:string) => {\n    let needsSetup = true;\n    const sceneParent = document.getElementById(sceneType) as HTMLElement;\n    sceneParent?.childNodes.forEach((node)=>{\n        if(node.nodeName===\"CANVAS\"){\n            needsSetup = false;\n        }\n    })\n\n    if(needsSetup){\n        const canvas = document.createElement(\"canvas\");\n        canvas.id=\"canvas-\"+sceneType;\n        sceneParent.appendChild(canvas);\n    }\n}\n/*****************************************************************************/\n/***************                    Triangle                  ****************/\n/*****************************************************************************/\nconst triangleButtoWebGPU:HTMLElement|null = document.getElementById(\"webGPUTab-triangle\");\ntriangleButtoWebGPU?.addEventListener(\"click\",async ()=>{\n    removeOtherScene(\"webGL2\");\n    setThisScene(\"webGPU\");\n    await webgpuDrawTriangle();\n})\nconst triangleButtoWebGL2:HTMLElement|null = document.getElementById(\"webGL2Tab-triangle\");\ntriangleButtoWebGL2?.addEventListener(\"click\",async ()=>{\n    removeOtherScene(\"webGPU\");\n    setThisScene(\"webGL2\");\n    webgl2DrawTriangle();\n})\nif(triangleButtoWebGL2!==null)webgl2DrawTriangle();\n\n\n/***************************************************************************/\n/***************                    Square                  ****************/\n/***************************************************************************/\nconst squareButtoWebGPU:HTMLElement|null = document.getElementById(\"webGPUTab-square\");\nsquareButtoWebGPU?.addEventListener(\"click\",async ()=>{\n    removeOtherScene(\"webGL2\");\n    setThisScene(\"webGPU\");\n    await webGPUDrawSquare();\n})\nconst squareButtoWebGL2:HTMLElement|null = document.getElementById(\"webGL2Tab-square\");\nsquareButtoWebGL2?.addEventListener(\"click\",async ()=>{\n    removeOtherScene(\"webGPU\");\n    setThisScene(\"webGL2\");\n    webGL2DrawSquare();\n})\n\n/***************************************************************************/\n/***************        Square with Indexed Vertices        ****************/\n/***************************************************************************/\nif(squareButtoWebGL2!==null)webGL2DrawSquare();\nconst square_with_index_verticesButtoWebGPU:HTMLElement|null = document.getElementById(\"webGPUTab-square-with-indexed-vertices\");\nsquare_with_index_verticesButtoWebGPU?.addEventListener(\"click\",async ()=>{\n    removeOtherScene(\"webGL2\");\n    setThisScene(\"webGPU\");\n    await webGPUDrawSquareWithIndexedVertices();\n})\nconst square_with_index_verticesButtoWebGL2:HTMLElement|null = document.getElementById(\"webGL2Tab-square-with-indexed-vertices\");\nsquare_with_index_verticesButtoWebGL2?.addEventListener(\"click\",async ()=>{\n    removeOtherScene(\"webGPU\");\n    setThisScene(\"webGL2\");\n    webGL2DrawSquareWithIndexedVertices();\n})\nif(square_with_index_verticesButtoWebGL2!==null)webGL2DrawSquareWithIndexedVertices();\n\n/***************************************************************************/\n/***************      Cube with Distinct Face COlors      ****************/\n/***************************************************************************/\nif(squareButtoWebGL2!==null)webGL2DrawSquare();\nconst cube_with_distinct_face_colorsButtoWebGPU:HTMLElement|null = document.getElementById(\"webGPUTab-cube-with-distinct-face-colors\");\ncube_with_distinct_face_colorsButtoWebGPU?.addEventListener(\"click\",async ()=>{\n    removeOtherScene(\"webGL2\");\n    setThisScene(\"webGPU\");\n    await webGPUDrawCubeWithDistinctFaceColors();\n})\nconst cube_with_distinct_face_colorsButtoWebGL2:HTMLElement|null = document.getElementById(\"webGL2Tab-cube-with-distinct-face-colors\");\ncube_with_distinct_face_colorsButtoWebGL2?.addEventListener(\"click\",async ()=>{\n    removeOtherScene(\"webGPU\");\n    setThisScene(\"webGL2\");\n    webGL2DrawCubeWithDistinctFaceColors();\n})\nif(cube_with_distinct_face_colorsButtoWebGL2!==null)webGL2DrawCubeWithDistinctFaceColors();\n\n/***************************************************************************/\n/***************      Cube with Distinct Vertex COlors      ****************/\n/***************************************************************************/\nif(squareButtoWebGL2!==null)webGL2DrawSquare();\nconst cube_with_distinct_vertex_colorsButtoWebGPU:HTMLElement|null = document.getElementById(\"webGPUTab-cube-with-distinct-vertex-colors\");\ncube_with_distinct_vertex_colorsButtoWebGPU?.addEventListener(\"click\",async ()=>{\n    removeOtherScene(\"webGL2\");\n    setThisScene(\"webGPU\");\n    await webGPUDrawCubeWithDistinctVertexColors();\n})\nconst cube_with_distinct_vertex_colorsButtoWebGL2:HTMLElement|null = document.getElementById(\"webGL2Tab-cube-with-distinct-vertex-colors\");\ncube_with_distinct_vertex_colorsButtoWebGL2?.addEventListener(\"click\",async ()=>{\n    removeOtherScene(\"webGPU\");\n    setThisScene(\"webGL2\");\n    webGL2DrawCubeWithDistinctVertexColors();\n})\nif(cube_with_distinct_vertex_colorsButtoWebGL2!==null)webGL2DrawCubeWithDistinctVertexColors();\n\n\n/***************************************************************************/\n/***************             Cube with Texture             ****************/\n/***************************************************************************/\nif(squareButtoWebGL2!==null)webGL2DrawSquare();\nconst cube_with_textureButtoWebGPU:HTMLElement|null = document.getElementById(\"webGPUTab-cube-with-texture\");\ncube_with_textureButtoWebGPU?.addEventListener(\"click\",async ()=>{\n    removeOtherScene(\"webGL2\");\n    setThisScene(\"webGPU\");\n    await webGPUDrawCubeWithTexture();\n})\nconst cube_with_textureButtoWebGL2:HTMLElement|null = document.getElementById(\"webGL2Tab-cube-with-texture\");\ncube_with_textureButtoWebGL2?.addEventListener(\"click\",async ()=>{\n    removeOtherScene(\"webGPU\");\n    setThisScene(\"webGL2\");\n    webGL2DrawCubeWithTexture();\n})\nif(cube_with_textureButtoWebGL2!==null)webGL2DrawCubeWithTexture();\n\n/***************************************************************************/\n/***************                Cube Animated               ****************/\n/***************************************************************************/\nif(squareButtoWebGL2!==null)webGL2DrawSquare();\nconst interactiveCubeButtoWebGPU:HTMLElement|null = document.getElementById(\"webGPUTab-interactive-cube\");\ninteractiveCubeButtoWebGPU?.addEventListener(\"click\",async ()=>{\n    removeOtherScene(\"webGL2\");\n    setThisScene(\"webGPU\");\n    await webGPUDrawInteractiveCube();\n})\nconst interactiveCubeButtoWebGL2:HTMLElement|null = document.getElementById(\"webGL2Tab-interactive-cube\");\ninteractiveCubeButtoWebGL2?.addEventListener(\"click\",async ()=>{\n    removeOtherScene(\"webGPU\");\n    setThisScene(\"webGL2\");\n    webGL2DrawInteractiveCube();\n})\nif(interactiveCubeButtoWebGL2!==null)webGL2DrawInteractiveCube();","import shader from './shader.wgsl';\r\n\r\nexport const webgpuDrawTriangle = async () => {\r\n    /*******************************************************************/\r\n    /****************           Initialise GPU          ****************/\r\n    /*******************************************************************/\r\n    if(!navigator.gpu){\r\n        const canvasParent = document.getElementById(\"webGPU\");\r\n        canvasParent? canvasParent.innerHTML=\"<h2>Your browser does not support WebGPU!<h2>\":null;\r\n\r\n    }\r\n    const canvas = document.getElementById(\"canvas-webGPU\") as HTMLCanvasElement;\r\n    const adapter = await navigator.gpu?.requestAdapter(); \r\n    const device = await adapter?.requestDevice() as GPUDevice; \r\n    const context = canvas.getContext(\"webgpu\") as unknown as GPUCanvasContext;\r\n    context.configure({\r\n        alphaMode:\"premultiplied\", device, format: await navigator.gpu.getPreferredCanvasFormat()\r\n    })\r\n    const format = 'bgra8unorm';\r\n\r\n    /*******************************************************************/\r\n    /**********                Resize Canvas                   *********/\r\n    /*******************************************************************/\r\n    const displayWidth  = canvas.clientWidth;\r\n    const displayHeight = canvas.clientHeight;\r\n    const needResize = canvas.width  !== displayWidth ||canvas.height !== displayHeight;\r\n    if (needResize) {\r\n      canvas.width  = displayWidth;\r\n      canvas.height = displayHeight;\r\n    }\r\n\r\n    /*******************************************************************/\r\n    /**********Create Vertex Buffer & Store Triangle's Vertices*********/\r\n    /*******************************************************************/\r\n    const positions:Float32Array = new Float32Array([\r\n        -0.5,-0.5,\r\n        0.0, 0.5,\r\n        0.5, -0.5\r\n    ]);\r\n    \r\n    const positionBuffer = device.createBuffer({\r\n        size: positions.byteLength,\r\n        usage:GPUBufferUsage.VERTEX,\r\n        mappedAtCreation: true\r\n    });\r\n\r\n    new Float32Array(positionBuffer.getMappedRange()).set(positions);\r\n    positionBuffer.unmap();\r\n\r\n    \r\n    /*******************************************************************/\r\n    /*****Setup Render Pipeline for Vertex & Fragment Shader Stages*****/\r\n    /*******************************************************************/\r\n    let pipeline:GPURenderPipeline;\r\n    pipeline = device.createRenderPipeline({\r\n        vertex:{\r\n            module: device.createShaderModule({\r\n                code:shader\r\n            }),\r\n            entryPoint: \"vs_main\",\r\n            buffers:[\r\n                {\r\n                    arrayStride:8,\r\n                    attributes:[{\r\n                        shaderLocation:0,\r\n                        format:\"float32x2\",\r\n                        offset:0\r\n                    }\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        fragment:{\r\n            module: device.createShaderModule({\r\n                code:shader\r\n            }),\r\n            entryPoint:\"fs_main\",\r\n            targets: [{format}]\r\n        },\r\n        primitive: {\r\n            topology: \"triangle-list\"\r\n        },\r\n        layout: device.createPipelineLayout({\r\n            bindGroupLayouts:[]\r\n        })\r\n    })\r\n\r\n    /*******************************************************************/\r\n    /**********             Create Command Encoder             *********/\r\n    /*******************************************************************/\r\n    const commandEncoder = device.createCommandEncoder();\r\n    const textureView = context.getCurrentTexture().createView();\r\n    const renderPass = commandEncoder.beginRenderPass({ \r\n        colorAttachments: [{\r\n            view:textureView,\r\n            clearValue:{r:1.0, g:1.0, b:1.0, a:1.0},\r\n            loadOp: 'clear',\r\n            storeOp:'store'\r\n        }]\r\n    })\r\n\r\n    /*******************************************************************/\r\n    /**********                    DRAW                        *********/\r\n    /*******************************************************************/ \r\n    renderPass.setPipeline(pipeline);\r\n    renderPass.setVertexBuffer(0, positionBuffer);\r\n    renderPass.draw(3,1,0,0);\r\n    \r\n    renderPass.end(); \r\n    device.queue.submit([commandEncoder.finish()])\r\n}","import shader from './shader.square.webgpu.wgsl'\r\nimport { initialiseGPU, createGPUBuffer } from '../../../helpers/webgpu';\r\nconst webGPUDrawSquare = async () => {\r\n    /*******************************************************************/\r\n    /****************           Initialise GPU          ****************/\r\n    /*******************************************************************/\r\n    const gpu = await initialiseGPU();\r\n    const format = 'bgra8unorm';\r\n    const device = gpu.device;\r\n    const context = gpu.context;\r\n\r\n    /*******************************************************************/\r\n    /**********Create Vertex Buffer & Store Vertices & Colors**********/\r\n    /*******************************************************************/\r\n    const data:Float32Array = new Float32Array([\r\n        -0.5,-0.5, 0.0,0.0,1.0,\r\n        -0.5, 0.5, 0.0,1.0,0.0,\r\n        0.5, -0.5, 0.0,1.0,0.0,\r\n        -0.5, 0.5, 0.0,1.0,0.0,\r\n        0.5, -0.5, 0.0,1.0,0.0,\r\n        0.5,0.5, 0.0,0.0,1.0,\r\n    ]);\r\n\r\n    const dataBuffer = createGPUBuffer(device, data, GPUBufferUsage.VERTEX);\r\n\r\n    /*******************************************************************/\r\n    /*****Setup Render Pipeline for Vertex & Fragment Shader Stages*****/\r\n    /*******************************************************************/\r\n    let pipeline = device.createRenderPipeline({\r\n        vertex:{\r\n            module: device.createShaderModule({\r\n                code:shader\r\n            }),\r\n            entryPoint: \"vs_main\",\r\n            buffers:[\r\n                {\r\n                    arrayStride:20,            \r\n                    attributes:[\r\n                        {\r\n                            shaderLocation:1,   \r\n                            format:\"float32x2\",\r\n                            offset:0            \r\n                        },\r\n                        {\r\n                            shaderLocation:2,   \r\n                            format:\"float32x3\",\r\n                            offset:8            \r\n                        }\r\n                ]\r\n                }\r\n            ]\r\n        },\r\n        fragment:{\r\n            module:device.createShaderModule({\r\n                code:shader\r\n            }),\r\n            entryPoint:\"fs_main\",\r\n            targets:[{format}]\r\n        },\r\n        primitive:{\r\n            topology:\"triangle-list\"\r\n        },\r\n        layout: device.createPipelineLayout({\r\n            bindGroupLayouts:[]\r\n        })\r\n    })\r\n\r\n    /*******************************************************************/\r\n    /**********             Create Command Encoder             *********/\r\n    /*******************************************************************/\r\n    const commandEncoder = device.createCommandEncoder();\r\n    const textureView = context.getCurrentTexture().createView();\r\n    const renderPass = commandEncoder.beginRenderPass({ \r\n        colorAttachments: [{\r\n            view:textureView,\r\n            clearValue:{r:0.0, g:0.0, b:0.0, a:0.0},\r\n            loadOp: 'clear',\r\n            storeOp:'store'\r\n        }]\r\n    })\r\n\r\n    /*******************************************************************/\r\n    /**********                    DRAW                        *********/\r\n    /*******************************************************************/\r\n    renderPass.setPipeline(pipeline);\r\n    renderPass.setVertexBuffer(0, dataBuffer);          \r\n    renderPass.draw(6,1,0,0);                           \r\n    \r\n    renderPass.end(); \r\n    device.queue.submit([commandEncoder.finish()]) \r\n}\r\n\r\nexport default webGPUDrawSquare;","import shader from './shader.square-with-indexed-vertices.webgpu.wgsl'\r\nimport { initialiseGPU, createGPUBuffer } from '../../../helpers/webgpu';\r\nconst webGPUDrawSquareWithIndexedVertices = async () => {\r\n    /*******************************************************************/\r\n    /****************           Initialise GPU          ****************/\r\n    /*******************************************************************/\r\n    const gpu = await initialiseGPU();\r\n    const format = 'bgra8unorm';\r\n    const device = gpu.device;\r\n    const context = gpu.context;\r\n\r\n    /*******************************************************************/\r\n    /**********Create Vertex Buffer & Store Vertices & Colors**********/\r\n    /*******************************************************************/\r\n    const data:Float32Array = new Float32Array([\r\n        -0.5,-0.5, 0.0,0.0,1.0,\r\n        -0.5, 0.5, 1.0,0.0,0.0,\r\n        0.5, -0.5, 1.0,0.0,0.0,\r\n        0.5,0.5, 0.0,0.0,1.0\r\n    ]);\r\n    const dataBuffer = createGPUBuffer(device, data, GPUBufferUsage.VERTEX);\r\n\r\n    /*******************************************************************/\r\n    /**********               Create Index Buffer              *********/\r\n    /*******************************************************************/\r\n    const indexData = new Uint32Array([0,1,2,3,2,1])\r\n    const indexBuffer = device.createBuffer({\r\n        size: indexData.byteLength,\r\n        usage:GPUBufferUsage.INDEX,\r\n        mappedAtCreation: true\r\n    });\r\n    new Uint32Array(indexBuffer.getMappedRange()).set(indexData);\r\n    indexBuffer.unmap();\r\n\r\n\r\n    /*******************************************************************/\r\n    /*****Setup Render Pipeline for Vertex & Fragment Shader Stages*****/\r\n    /*******************************************************************/\r\n    let pipeline = device.createRenderPipeline({\r\n        vertex:{\r\n            module: device.createShaderModule({\r\n                code:shader\r\n            }),\r\n            entryPoint: \"vs_main\",\r\n            buffers:[\r\n                {\r\n                    arrayStride:20,            \r\n                    attributes:[\r\n                        {\r\n                            shaderLocation:1,   \r\n                            format:\"float32x2\",\r\n                            offset:0            \r\n                        },\r\n                        {\r\n                            shaderLocation:2,  \r\n                            format:\"float32x3\",\r\n                            offset:8            \r\n                        }\r\n                ]\r\n                }\r\n            ]\r\n        },\r\n        fragment:{\r\n            module:device.createShaderModule({\r\n                code:shader\r\n            }),\r\n            entryPoint:\"fs_main\",\r\n            targets:[{format}]\r\n        },\r\n        primitive:{\r\n            topology:\"triangle-list\"\r\n        },\r\n        layout: device.createPipelineLayout({\r\n            bindGroupLayouts:[]\r\n        })\r\n    })\r\n\r\n\r\n    /*******************************************************************/\r\n    /**********             Create Command Encoder             *********/\r\n    /*******************************************************************/\r\n    const commandEncoder = device.createCommandEncoder();\r\n    const textureView = context.getCurrentTexture().createView();\r\n    const renderPass = commandEncoder.beginRenderPass({ \r\n        colorAttachments: [{\r\n            view:textureView,\r\n            clearValue:{r:1.0, g:1.0, b:1.0, a:1.0},\r\n            loadOp: 'clear',\r\n            storeOp:'store'\r\n        }]\r\n    })\r\n\r\n    /*******************************************************************/\r\n    /**********                    DRAW                        *********/\r\n    /*******************************************************************/\r\n    renderPass.setPipeline(pipeline);\r\n    renderPass.setVertexBuffer(0, dataBuffer);          \r\n    renderPass.setIndexBuffer(indexBuffer,\"uint32\");    \r\n    renderPass.drawIndexed(6,1,0,0);                           \r\n    \r\n    renderPass.end(); \r\n    device.queue.submit([commandEncoder.finish()]) \r\n}\r\n\r\nexport default webGPUDrawSquareWithIndexedVertices;","import shader from './shader.cube-with-distinct-face-colors.wgsl'\nimport { initialiseGPU, createGPUBuffer } from '../../../helpers/webgpu';\nimport { createTransforms, createViewProjectionPerspective, cubeCompleteVertexData, cubeFaceColorData, cubeIndexData, cubeUniqueVertexData } from '../../../helpers/common';\nimport { mat4 } from 'gl-matrix';\nconst webGPUDrawCubeWithDistinctFaceColors = async () => {\n    /*******************************************************************/\n    /****************           Initialise GPU          ****************/\n    /*******************************************************************/\n    const gpu = await initialiseGPU();\n    const format = 'bgra8unorm';\n    const device = gpu.device;\n\n\n    /*******************************************************************/\n    /******Create Vertex & Color Buffers to Store Vertices & Colors*****/\n    /*******************************************************************/\n    const cubeData = new Float32Array(cubeCompleteVertexData);\n    const colorData = new Float32Array(cubeFaceColorData);\n    const vertexBuffer = createGPUBuffer(device, cubeData, GPUBufferUsage.VERTEX);\n    const colorBuffer = createGPUBuffer(device, colorData, GPUBufferUsage.VERTEX);\n    const numberOfVertices = cubeData.length;\n\n\n    \n    /*******************************************************************/\n    /****Create Uniform Bind Group Layout to Pass Uniform to Shader*****/\n    /*******************************************************************/\n    const uniformBindGroupLayout = device.createBindGroupLayout({\n        entries: [\n            {\n                binding: 0,\n                visibility: GPUShaderStage.VERTEX,\n                buffer:{\n                    type:\"uniform\"\n                }\n            }\n        ]\n    });\n\n    /*******************************************************************/\n    /*****Setup Render Pipeline for Vertex & Fragment Shader Stages*****/\n    /*******************************************************************/\n    let pipeline = device.createRenderPipeline({\n        vertex:{\n            module: device.createShaderModule({\n                code:shader\n            }),\n            entryPoint: \"vs_main\",\n            buffers:[\n                {\n                    arrayStride:12,            \n                    attributes:[\n                        {\n                            shaderLocation:0,   \n                            format:\"float32x3\",\n                            offset:0            \n                        }\n                    ],\n                },\n                {\n                    arrayStride:12,            \n                    attributes:[\n                        {\n                            shaderLocation:1,   \n                            format:\"float32x3\",\n                            offset:0            \n                        }\n                    ],\n                }\n            ]\n        },\n        fragment:{\n            module:device.createShaderModule({\n                code:shader\n            }),\n            entryPoint:\"fs_main\",\n            targets:[{format}]\n        },\n        primitive:{\n            topology:\"triangle-list\"\n        },\n        depthStencil:{\n            format:\"depth24plus\",\n            depthWriteEnabled: true,\n            depthCompare: \"less\"\n        },\n        layout: device.createPipelineLayout({bindGroupLayouts:[uniformBindGroupLayout]})\n    })\n\n\n    /*******************************************************************/\n    /********** Create Uniform Buffer & Uniform Bind Group *************/\n    /*******************************************************************/\n    const uniformBuffer = device.createBuffer({\n        size: 64,\n        usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST\n    });\n\n    const uniformBindGroup = device.createBindGroup({\n        layout: pipeline.getBindGroupLayout(0),\n        entries: [\n            {\n                binding: 0,\n                resource: {\n                    buffer: uniformBuffer,\n                    offset: 0,\n                    size: 64\n                }\n            }\n        ]\n    });\n\n\n    /*******************************************************************/\n    /**********     Generate Model View Projection Matrix      *********/\n    /*******************************************************************/\n    const modelMatrix = mat4.create();\n    const mvpMatrix = mat4.create();\n    let vpMatrix = mat4.create();\n    const vp = createViewProjectionPerspective(gpu.canvas.width/gpu.canvas.height);\n    vpMatrix = vp.viewProjectionMatrix;\n\n    createTransforms(modelMatrix,[0,0,-2],[2.44,-0.46,0]);\n    mat4.multiply(mvpMatrix, vpMatrix, modelMatrix);\n\n\n    /*******************************************************************/\n    /*********************     Pass Uniforms      **********************/\n    /*******************************************************************/\n    device.queue.writeBuffer(uniformBuffer, 0, mvpMatrix as ArrayBuffer);\n\n\n    /*******************************************************************/\n    /**********             Create Command Encoder             *********/\n    /*******************************************************************/\n    const commandEncoder = device.createCommandEncoder();\n    const textureView = gpu.context.getCurrentTexture().createView();\n    const depthTexture = device.createTexture({\n        size: [gpu.canvas.width, gpu.canvas.height, 1],\n        format: \"depth24plus\",\n        usage: GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n    const renderPass = commandEncoder.beginRenderPass({\n        colorAttachments: [{\n            view:textureView,\n            clearValue:{r:1.0, g:1.0, b:1.0, a:1.0},\n            loadOp: 'clear',\n            storeOp:'store'\n        }],\n        depthStencilAttachment:{\n            view: depthTexture.createView({\n                aspect:\"all\"\n            }),\n            depthClearValue: 1.0,\n            depthLoadOp: \"clear\",\n            depthStoreOp: \"store\",\n            depthReadOnly: false,\n        }\n        \n    })\n\n    \n    /*******************************************************************/\n    /**********                    DRAW                        *********/\n    /*******************************************************************/\n    renderPass.setPipeline(pipeline);\n    renderPass.setVertexBuffer(0, vertexBuffer);\n    renderPass.setVertexBuffer(1, colorBuffer);\n    renderPass.setBindGroup(0, uniformBindGroup);\n    renderPass.draw(numberOfVertices/3);                          \n    renderPass.end(); \n    device.queue.submit([commandEncoder.finish()]) \n}\n\nexport default webGPUDrawCubeWithDistinctFaceColors;","import shader from './shader.cube-with-distinct-vertex-colors.wgsl'\nimport { initialiseGPU, createGPUBuffer } from '../../../helpers/webgpu';\nimport { createTransforms, createViewProjectionPerspective, cubeIndexData, cubeUniqueVertexData } from '../../../helpers/common';\nimport { mat4 } from 'gl-matrix';\nconst webGPUDrawCubeWithDistinctVertexColors = async () => {\n    /*******************************************************************/\n    /****************           Initialise GPU          ****************/\n    /*******************************************************************/\n    const gpu = await initialiseGPU();\n    const format = 'bgra8unorm';\n    const device = gpu.device;\n\n\n    /*******************************************************************/\n    /******Create Vertex & Index Buffers to Store Vertices & Colors*****/\n    /*******************************************************************/\n    const cubeData = new Float32Array(cubeUniqueVertexData);\n    const vertexBuffer = createGPUBuffer(device, cubeData, GPUBufferUsage.VERTEX);\n    const indexData = new Uint32Array(cubeIndexData)\n    const numberOfVertices = indexData.length;\n    const indexBuffer = createGPUBuffer(device, indexData, GPUBufferUsage.INDEX);\n\n\n    /*******************************************************************/\n    /****Create Uniform Bind Group Layout to Pass Uniform to Shader*****/\n    /*******************************************************************/\n    const uniformBindGroupLayout = device.createBindGroupLayout({\n        entries: [\n            {\n                binding: 0,\n                visibility: GPUShaderStage.VERTEX,\n                buffer:{\n                    type:\"uniform\"\n                }\n            }\n        ]\n    });\n\n\n    /*******************************************************************/\n    /*****Setup Render Pipeline for Vertex & Fragment Shader Stages*****/\n    /*******************************************************************/\n    let pipeline = device.createRenderPipeline({\n        vertex:{\n            module: device.createShaderModule({\n                code:shader\n            }),\n            entryPoint: \"vs_main\",\n            buffers:[\n                {\n                    arrayStride:24,            \n                    attributes:[\n                        {\n                            shaderLocation:0,   \n                            format:\"float32x3\",\n                            offset:0            \n                        },\n                        {\n                            shaderLocation:1,  \n                            format:\"float32x3\",\n                            offset:12            \n                        }\n                ]\n                }\n            ]\n        },\n        fragment:{\n            module:device.createShaderModule({\n                code:shader\n            }),\n            entryPoint:\"fs_main\",\n            targets:[{format}]\n        },\n        primitive:{\n            topology:\"triangle-list\"\n        },\n        depthStencil:{\n            format:\"depth24plus\",\n            depthWriteEnabled: true,\n            depthCompare: \"less\"\n        },\n        layout: device.createPipelineLayout({bindGroupLayouts:[uniformBindGroupLayout]})\n    })\n\n\n    /*******************************************************************/\n    /********** Create Uniform Buffer & Uniform Bind Group *************/\n    /*******************************************************************/\n    const uniformBuffer = device.createBuffer({\n        size: 64,\n        usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST\n    });\n\n    const uniformBindGroup = device.createBindGroup({\n        layout: pipeline.getBindGroupLayout(0),\n        entries: [\n            {\n                binding: 0,\n                resource: {\n                    buffer: uniformBuffer,\n                    offset: 0,\n                    size: 64\n                }\n            }\n        ]\n    });\n\n\n    /*******************************************************************/\n    /**********     Generate Model View Projection Matrix      *********/\n    /*******************************************************************/\n    const modelMatrix = mat4.create();\n    const mvpMatrix = mat4.create();\n    let vpMatrix = mat4.create();\n    const vp = createViewProjectionPerspective(gpu.canvas.width/gpu.canvas.height);\n    vpMatrix = vp.viewProjectionMatrix;\n\n    createTransforms(modelMatrix,[0,0,-2],[2.44,-0.46,0]);\n    mat4.multiply(mvpMatrix, vpMatrix, modelMatrix);\n\n\n    /*******************************************************************/\n    /*********************     Pass Uniforms      **********************/\n    /*******************************************************************/\n    device.queue.writeBuffer(uniformBuffer, 0, mvpMatrix as ArrayBuffer);\n\n\n    /*******************************************************************/\n    /**********             Create Command Encoder             *********/\n    /*******************************************************************/\n    const commandEncoder = device.createCommandEncoder();\n    const textureView = gpu.context.getCurrentTexture().createView();\n    const depthTexture = device.createTexture({\n        size: [gpu.canvas.width, gpu.canvas.height, 1],\n        format: \"depth24plus\",\n        usage: GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n    const renderPass = commandEncoder.beginRenderPass({\n        colorAttachments: [{\n            view:textureView,\n            clearValue:{r:1.0, g:1.0, b:1.0, a:1.0},\n            loadOp: 'clear',\n            storeOp:'store'\n        }],\n        depthStencilAttachment:{\n            view: depthTexture.createView({\n                aspect:\"all\"\n            }),\n            depthClearValue: 1.0,\n            depthLoadOp: \"clear\",\n            depthStoreOp: \"store\",\n            depthReadOnly: false,\n        }\n        \n    })\n\n    \n    /*******************************************************************/\n    /**********                    DRAW                        *********/\n    /*******************************************************************/\n    renderPass.setPipeline(pipeline);\n    renderPass.setVertexBuffer(0, vertexBuffer);\n    renderPass.setIndexBuffer(indexBuffer,\"uint32\");\n    renderPass.setBindGroup(0, uniformBindGroup);\n    renderPass.drawIndexed(numberOfVertices);                          \n    renderPass.end(); \n    device.queue.submit([commandEncoder.finish()]) \n}\n\nexport default webGPUDrawCubeWithDistinctVertexColors;","import shader from './shader.cube-with-texture.wgsl'\nimport { initialiseGPU, createGPUBuffer } from '../../../helpers/webgpu';\nimport { createTransforms, createViewProjectionPerspective, cubeCompleteVertexData, cubeFaceColorData, cubeIndexData, cubeTextureCoord, cubeUniqueVertexData } from '../../../helpers/common';\nimport { mat4 } from 'gl-matrix';\nimport ts from 'typescript';\nconst webGPUDrawCubeWithTexture = async () => {\n    /*******************************************************************/\n    /****************           Initialise GPU          ****************/\n    /*******************************************************************/\n    const gpu = await initialiseGPU();\n    const format = 'bgra8unorm';\n    const device = gpu.device;\n\n\n    /*******************************************************************/\n    /****** Create Buffers to Store Vertices & Texture Coordinates *****/\n    /*******************************************************************/\n    const cubeData = new Float32Array(cubeCompleteVertexData);\n    const textureData = new Float32Array(cubeTextureCoord);\n    const vertexBuffer = createGPUBuffer(device, cubeData, GPUBufferUsage.VERTEX);\n    const textureBuffer = createGPUBuffer(device, textureData, GPUBufferUsage.VERTEX);\n    const numberOfVertices = cubeData.length;\n\n\n    /*******************************************************************/\n    /**********                  Create Texture                *********/\n    /*******************************************************************/\n    const image = new Image();\n    image.src = \"./assets/webgpu_single_texture.png\";\n    await image.decode();\n    const imageBitmap = await createImageBitmap(image);\n\n    const texture = device.createTexture({\n        size: [imageBitmap.width, imageBitmap.height,1],\n        format: 'rgba8unorm',\n        usage: GPUTextureUsage.TEXTURE_BINDING |\n        GPUTextureUsage.COPY_DST |\n        GPUTextureUsage.RENDER_ATTACHMENT\n    });\n\n    const sampler = device.createSampler({\n        minFilter: 'linear',\n        magFilter: 'linear',\n        addressModeU: 'repeat',\n        addressModeV: 'repeat'\n    });\n\n    device.queue.copyExternalImageToTexture(\n        {source: imageBitmap},\n        {texture: texture},\n        [imageBitmap.width, imageBitmap.height]\n    );\n\n    /*******************************************************************/\n    /*****                  Create Bind Group Layout               *****/\n    /** COMMENTED OUT BECAUSE PIPELINE LAYOUT CAN BE SET TO AUTO(135) **/\n    /******************************************************************\n    const uniformBindGroupLayout = device.createBindGroupLayout({\n        entries: [\n            {\n                binding: 0,\n                visibility: GPUShaderStage.VERTEX,\n                buffer:{\n                    type:\"uniform\"\n                }\n            },\n            {\n                binding: 1,\n                visibility: GPUShaderStage.FRAGMENT,\n                texture:{\n                    multisampled:false,\n                    viewDimension:undefined,\n                    sampleType:\"float\"\n                }\n            },\n            {\n                binding: 2,\n                visibility: GPUShaderStage.FRAGMENT,\n                sampler:{\n                   type:\"filtering\",\n                }\n            }\n            \n        ]\n    });*/\n\n\n    /*******************************************************************/\n    /*****Setup Render Pipeline for Vertex & Fragment Shader Stages*****/\n    /*******************************************************************/\n    let pipeline = device.createRenderPipeline({\n        vertex:{\n            module: device.createShaderModule({\n                code:shader\n            }),\n            entryPoint: \"vs_main\",\n            buffers:[\n                {\n                    arrayStride:12,            \n                    attributes:[\n                        {\n                            shaderLocation:0,   \n                            format:\"float32x3\",\n                            offset:0            \n                        }\n                    ],\n                },\n                {\n                    arrayStride:8,            \n                    attributes:[\n                        {\n                            shaderLocation:1,   \n                            format:\"float32x2\",\n                            offset:0            \n                        }\n                    ],\n                }\n            ]\n        },\n        fragment:{\n            module:device.createShaderModule({\n                code:shader\n            }),\n            entryPoint:\"fs_main\",\n            targets:[{format}]\n        },\n        primitive:{\n            topology:\"triangle-list\"\n        },\n        depthStencil:{\n            format:\"depth24plus\",\n            depthWriteEnabled: true,\n            depthCompare: \"less\"\n        },\n        layout: 'auto'\n    })\n\n\n    /*******************************************************************/\n    /********** Create Uniform Buffer & Uniform Bind Group *************/\n    /*******************************************************************/\n    const uniformBuffer = device.createBuffer({\n        size: 64,\n        usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST\n    });\n\n    const uniformBindGroup = device.createBindGroup({\n        layout: pipeline.getBindGroupLayout(0),\n        entries: [\n            {\n                binding: 0,\n                resource: {\n                    buffer: uniformBuffer,\n                    offset: 0,\n                    size: 64\n                }\n            },\n            {\n                binding:1,\n                resource:sampler\n            },\n            {\n                binding:2,\n                resource:texture.createView()\n            }\n        ]\n    });\n\n\n    /*******************************************************************/\n    /**********     Generate Model View Projection Matrix      *********/\n    /*******************************************************************/\n    const modelMatrix = mat4.create();\n    const mvpMatrix = mat4.create();\n    let vpMatrix = mat4.create();\n    const vp = createViewProjectionPerspective(gpu.canvas.width/gpu.canvas.height);\n    vpMatrix = vp.viewProjectionMatrix;\n\n    createTransforms(modelMatrix,[0,0,-2],[2.44,-0.46,0]);\n    mat4.multiply(mvpMatrix, vpMatrix, modelMatrix);\n\n\n    /*******************************************************************/\n    /*********************     Pass Uniforms      **********************/\n    /*******************************************************************/\n    device.queue.writeBuffer(uniformBuffer, 0, mvpMatrix as ArrayBuffer);\n\n\n    /*******************************************************************/\n    /**********             Create Command Encoder             *********/\n    /*******************************************************************/\n    const commandEncoder = device.createCommandEncoder();\n    const textureView = gpu.context.getCurrentTexture().createView();\n    const depthTexture = device.createTexture({\n        size: [gpu.canvas.width, gpu.canvas.height, 1],\n        format: \"depth24plus\",\n        usage: GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n    const renderPass = commandEncoder.beginRenderPass({\n        colorAttachments: [{\n            view:textureView,\n            clearValue:{r:1.0, g:1.0, b:1.0, a:1.0},\n            loadOp: 'clear',\n            storeOp:'store'\n        }],\n        depthStencilAttachment:{\n            view: depthTexture.createView({\n                aspect:\"all\"\n            }),\n            depthClearValue: 1.0,\n            depthLoadOp: \"clear\",\n            depthStoreOp: \"store\",\n            depthReadOnly: false,\n        }\n        \n    })\n\n    \n    /*******************************************************************/\n    /**********                    DRAW                        *********/\n    /*******************************************************************/\n    renderPass.setPipeline(pipeline);\n    renderPass.setVertexBuffer(0, vertexBuffer);\n    renderPass.setVertexBuffer(1, textureBuffer);\n    renderPass.setBindGroup(0, uniformBindGroup);\n    renderPass.draw(numberOfVertices/3);                          \n    renderPass.end(); \n    device.queue.submit([commandEncoder.finish()]) \n}\n\nexport default webGPUDrawCubeWithTexture;","import shaderTexture from '../../cube-with-texture/webgpu/shader.cube-with-texture.wgsl'\nimport shaderVertices from '../../cube-with-distinct-vertex-colors/webgpu/shader.cube-with-distinct-vertex-colors.wgsl'\nimport shaderFaces from '../../cube-with-distinct-face-colors/webgpu/shader.cube-with-distinct-face-colors.wgsl'\nimport { initialiseGPU, createGPUBuffer } from '../../../helpers/webgpu';\nimport { createTransforms, createViewProjectionPerspective, cubeCompleteVertexData, cubeFaceColorData, cubeIndexData, cubeTextureCoord, cubeUniqueVertexData } from '../../../helpers/common';\nimport { mat4 } from 'gl-matrix';\nconst webGPUDrawCubeAnimated = async () => {\n    /*******************************************************************/\n    /****************           Initialise GPU          ****************/\n    /*******************************************************************/\n    const gpu = await initialiseGPU();\n    const format = 'bgra8unorm';\n    const device = gpu.device;\n\n\n    /*******************************************************************/\n    /****************     Declare Required Variables    ****************/\n    /*******************************************************************/\n    let cubeData!: Float32Array;\n    let textureData!: Float32Array;\n    let colorData!: Float32Array;\n    let vertexBuffer!: GPUBuffer; \n    let textureBuffer!: GPUBuffer;\n    let colorBuffer!: GPUBuffer;\n    let indexBuffer!: GPUBuffer;\n    let indexData!: Uint32Array;\n    let drawSize: number =0;\n    let pipeline!:GPURenderPipeline;\n    let material =\"texture\";\n\n    let uniformBindGroup!:GPUBindGroup;\n    const uniformBuffer = device.createBuffer({\n        size: 64,\n        usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST\n    });\n\n    /*******************************************************************/\n    /****************  Setup Pipeline Based on Material ****************/\n    /*******************************************************************/\n    const setCubeBasedOnMaterial = async() =>{\n    switch (material){\n        case \"texture\":\n            /*******************************************************************/\n            /****** Create Buffers to Store Vertices & Texture Coordinates *****/\n            /*******************************************************************/\n            cubeData = new Float32Array(cubeCompleteVertexData);\n            textureData = new Float32Array(cubeTextureCoord);\n            vertexBuffer = createGPUBuffer(device, cubeData, GPUBufferUsage.VERTEX);\n            textureBuffer = createGPUBuffer(device, textureData, GPUBufferUsage.VERTEX);\n            drawSize = cubeData.length/3;\n            /*******************************************************************/\n            /**********                  Create Texture                *********/\n            /*******************************************************************/\n            const image = new Image();\n            image.src = \"./assets/webgpu_single_texture.png\";\n            await image.decode();\n            const imageBitmap = await createImageBitmap(image);\n            const texture = device.createTexture({\n                size: [imageBitmap.width, imageBitmap.height,1],\n                format: 'rgba8unorm',\n                usage: GPUTextureUsage.TEXTURE_BINDING |\n                GPUTextureUsage.COPY_DST |\n                GPUTextureUsage.RENDER_ATTACHMENT\n            });\n            const sampler = device.createSampler({\n                minFilter: 'linear',\n                magFilter: 'linear',\n                addressModeU: 'repeat',\n                addressModeV: 'repeat'\n            });\n            device.queue.copyExternalImageToTexture(\n                {source: imageBitmap},\n                {texture: texture},\n                [imageBitmap.width, imageBitmap.height]\n            );\n            /*******************************************************************/\n            /*****Setup Render Pipeline for Vertex & Fragment Shader Stages*****/\n            /*******************************************************************/\n            pipeline = device.createRenderPipeline({\n                vertex:{\n                    module: device.createShaderModule({\n                        code:shaderTexture\n                    }),\n                    entryPoint: \"vs_main\",\n                    buffers:[\n                        {\n                            arrayStride:12,            \n                            attributes:[\n                                {\n                                    shaderLocation:0,   \n                                    format:\"float32x3\",\n                                    offset:0            \n                                }\n                            ],\n                        },\n                        {\n                            arrayStride:8,            \n                            attributes:[\n                                {\n                                    shaderLocation:1,   \n                                    format:\"float32x2\",\n                                    offset:0            \n                                }\n                            ],\n                        }\n                    ]\n                },\n                fragment:{\n                    module:device.createShaderModule({\n                        code:shaderTexture\n                    }),\n                    entryPoint:\"fs_main\",\n                    targets:[{format}]\n                },\n                primitive:{\n                    topology:\"triangle-list\"\n                },\n                depthStencil:{\n                    format:\"depth24plus\",\n                    depthWriteEnabled: true,\n                    depthCompare: \"less\"\n                },\n                layout: 'auto'\n            })\n            /*******************************************************************/\n            /********** Create Uniform Buffer & Uniform Bind Group *************/\n            /*******************************************************************/\n            uniformBindGroup = device.createBindGroup({\n                layout: pipeline.getBindGroupLayout(0),\n                entries: [\n                    {\n                        binding: 0,\n                        resource: {\n                            buffer: uniformBuffer,\n                            offset: 0,\n                            size: 64\n                        }\n                    },\n                    {\n                        binding:1,\n                        resource:sampler\n                    },\n                    {\n                        binding:2,\n                        resource:texture.createView()\n                    }\n                ]\n            });\n            break;\n        case \"distinct-vertex-colors\":\n            /*******************************************************************/\n            /******       Create Buffers to Store Vertices & Indices       *****/\n            /*******************************************************************/\n            cubeData = new Float32Array(cubeUniqueVertexData);\n            vertexBuffer = createGPUBuffer(device, cubeData, GPUBufferUsage.VERTEX);\n            indexData = new Uint32Array(cubeIndexData)\n            drawSize = indexData.length;\n            indexBuffer = createGPUBuffer(device, indexData, GPUBufferUsage.INDEX);\n            /*******************************************************************/\n            /*****Setup Render Pipeline for Vertex & Fragment Shader Stages*****/\n            /*******************************************************************/\n            pipeline = device.createRenderPipeline({\n                vertex:{\n                    module: device.createShaderModule({\n                        code:shaderVertices\n                    }),\n                    entryPoint: \"vs_main\",\n                    buffers:[\n                        {\n                            arrayStride:24,            \n                            attributes:[\n                                {\n                                    shaderLocation:0,   \n                                    format:\"float32x3\",\n                                    offset:0            \n                                },\n                                {\n                                    shaderLocation:1,  \n                                    format:\"float32x3\",\n                                    offset:12            \n                                }\n                        ]\n                        }\n                    ]\n                },\n                fragment:{\n                    module:device.createShaderModule({\n                        code:shaderVertices\n                    }),\n                    entryPoint:\"fs_main\",\n                    targets:[{format}]\n                },\n                primitive:{\n                    topology:\"triangle-list\"\n                },\n                depthStencil:{\n                    format:\"depth24plus\",\n                    depthWriteEnabled: true,\n                    depthCompare: \"less\"\n                },\n                layout: \"auto\"\n            })\n            /*******************************************************************/\n            /********** Create Uniform Buffer & Uniform Bind Group *************/\n            /*******************************************************************/\n            uniformBindGroup = device.createBindGroup({\n                layout: pipeline.getBindGroupLayout(0),\n                entries: [\n                    {\n                        binding: 0,\n                        resource: {\n                            buffer: uniformBuffer,\n                            offset: 0,\n                            size: 64\n                        }\n                    }\n                ]\n            });\n            break\n        case \"distinct-face-colors\":\n            /*******************************************************************/\n            /******       Create Buffers to Store Vertices & Colors        *****/\n            /*******************************************************************/\n            cubeData = new Float32Array(cubeCompleteVertexData);\n            colorData = new Float32Array(cubeFaceColorData);\n            vertexBuffer = createGPUBuffer(device, cubeData, GPUBufferUsage.VERTEX);\n            colorBuffer = createGPUBuffer(device, colorData, GPUBufferUsage.VERTEX);\n            drawSize = cubeData.length/3;indexBuffer = createGPUBuffer(device, indexData, GPUBufferUsage.INDEX);\n            /*******************************************************************/\n            /*****Setup Render Pipeline for Vertex & Fragment Shader Stages*****/\n            /*******************************************************************/\n            pipeline = device.createRenderPipeline({\n                vertex:{\n                    module: device.createShaderModule({\n                        code:shaderFaces\n                    }),\n                    entryPoint: \"vs_main\",\n                    buffers:[\n                        {\n                            arrayStride:12,            \n                            attributes:[\n                                {\n                                    shaderLocation:0,   \n                                    format:\"float32x3\",\n                                    offset:0            \n                                }\n                            ],\n                        },\n                        {\n                            arrayStride:12,            \n                            attributes:[\n                                {\n                                    shaderLocation:1,   \n                                    format:\"float32x3\",\n                                    offset:0            \n                                }\n                            ],\n                        }\n                    ]\n                },\n                fragment:{\n                    module:device.createShaderModule({\n                        code:shaderFaces\n                    }),\n                    entryPoint:\"fs_main\",\n                    targets:[{format}]\n                },\n                primitive:{\n                    topology:\"triangle-list\"\n                },\n                depthStencil:{\n                    format:\"depth24plus\",\n                    depthWriteEnabled: true,\n                    depthCompare: \"less\"\n                },\n                layout: \"auto\"\n            })\n            /*******************************************************************/\n            /********** Create Uniform Buffer & Uniform Bind Group *************/\n            /*******************************************************************/\n            uniformBindGroup = device.createBindGroup({\n                layout: pipeline.getBindGroupLayout(0),\n                entries: [\n                    {\n                        binding: 0,\n                        resource: {\n                            buffer: uniformBuffer,\n                            offset: 0,\n                            size: 64\n                        }\n                    }\n                ]\n            });\n            break\n        default:\n            return;\n    }\n    }\n    await setCubeBasedOnMaterial();\n\n    /*******************************************************************/\n    /********** Create Transform Variables and Change Listeners*********/\n    /*******************************************************************/\n    let tX = 0;\n    let tY = 0;\n    let tZ = 0;\n    let sX = 1;\n    let sY = 1;\n    let sZ = 1;\n    let rX = 0;\n    let rY = 0;\n    let rZ = 0;\n    document.getElementById(\"translate-x\")?.addEventListener(\"input\", (e:any)=>{\n      tX = e?.target?.value;\n    //   drawScene();\n    })  \n    document.getElementById(\"translate-y\")?.addEventListener(\"input\", (e:any)=>{\n      tY = e?.target?.value;\n    //   drawScene();\n    })  \n    document.getElementById(\"translate-z\")?.addEventListener(\"input\", (e:any)=>{\n      tZ = e?.target?.value;\n    //   drawScene();\n    })  \n    document.getElementById(\"scale-x\")?.addEventListener(\"input\", (e:any)=>{\n      sX = e?.target?.value;\n    //   drawScene();\n    })  \n    document.getElementById(\"scale-y\")?.addEventListener(\"input\", (e:any)=>{\n      sY = e?.target?.value;\n    //   drawScene();\n    })  \n    document.getElementById(\"scale-z\")?.addEventListener(\"input\", (e:any)=>{\n      sZ = e?.target?.value;\n    //   drawScene();\n    })  \n    document.getElementById(\"rotate-x\")?.addEventListener(\"input\", (e:any)=>{\n      rX = e?.target?.value * (Math.PI/180);\n    //   drawScene();\n    })  \n    document.getElementById(\"rotate-y\")?.addEventListener(\"input\", (e:any)=>{\n      rY = e?.target?.value * (Math.PI/180);\n    //   drawScene();\n    })  \n    document.getElementById(\"rotate-z\")?.addEventListener(\"input\", (e:any)=>{\n      rZ = e?.target?.value * (Math.PI/180);\n    //   drawScene();\n    })  \n    document.getElementById(\"material\")?.addEventListener(\"change\", async (e:any)=>{\n      material = e?.target?.value;\n      await setCubeBasedOnMaterial();\n    //   drawScene();\n    })  \n\n\n    /*******************************************************************/\n    /**********             Create Command Encoder             *********/\n    /*******************************************************************/\n    let textureView = gpu.context.getCurrentTexture().createView();\n    const depthTexture = device.createTexture({\n        size: [gpu.canvas.width, gpu.canvas.height, 1],\n        format: \"depth24plus\",\n        usage: GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n\n    const renderPassDescription = {\n        colorAttachments: [{\n            view:textureView,\n            clearValue:{r:0.0, g:0.0, b:0.0, a:0.0},\n            loadOp: 'clear',\n            storeOp:'store'\n        }],\n        depthStencilAttachment:{\n            view: depthTexture.createView({\n                aspect:\"all\"\n            }),\n            depthClearValue: 1.0,\n            depthLoadOp: \"clear\",\n            depthStoreOp: \"store\",\n            depthReadOnly: false,\n        }\n    };\n    let fpsContainer:HTMLElement = document.createElement('div');\n    fpsContainer = document.getElementById(\"fps\") as HTMLElement;\n    let fps = 1;\n    const times:any = [];\n    const drawScene = (timestamp:any) => {\n      while (times.length > 0 && times[0] <= timestamp - 1000) {\n        times.shift();\n      }\n      times.push(timestamp);\n      fps = times.length;\n      fpsContainer.innerText = fps.toString();\n\n        textureView = gpu.context.getCurrentTexture().createView();\n        renderPassDescription.colorAttachments[0].view = textureView;\n\n        const commandEncoder = device.createCommandEncoder();\n        const renderPass = commandEncoder.beginRenderPass(renderPassDescription as GPURenderPassDescriptor);\n    /*******************************************************************/\n    /**********     Generate Model View Projection Matrix      *********/\n    /*******************************************************************/\n    const modelMatrix = mat4.create();\n    const mvpMatrix = mat4.create();\n    let vpMatrix = mat4.create();\n    const vp = createViewProjectionPerspective(gpu.canvas.width/gpu.canvas.height);\n    vpMatrix = vp.viewProjectionMatrix;\n\n    createTransforms(modelMatrix,[tX,tY,tZ],[rX,rY,rZ], [sX,sY,sZ]);\n    mat4.multiply(mvpMatrix, vpMatrix, modelMatrix);\n\n\n    /*******************************************************************/\n    /*********************     Pass Uniforms      **********************/\n    /*******************************************************************/\n    device.queue.writeBuffer(uniformBuffer, 0, mvpMatrix as ArrayBuffer);\n    \n    /*******************************************************************/\n    /**********                    DRAW                        *********/\n    /*******************************************************************/\n    renderPass.setPipeline(pipeline);\n    renderPass.setVertexBuffer(0, vertexBuffer);\n    if(material===\"distinct-vertex-colors\"){\n        renderPass.setIndexBuffer(indexBuffer,\"uint32\");\n        renderPass.setBindGroup(0, uniformBindGroup);\n        renderPass.drawIndexed(drawSize);  \n    }\n    else{\n        if(material===\"distinct-face-colors\") renderPass.setVertexBuffer(1, colorBuffer);\n        else renderPass.setVertexBuffer(1, textureBuffer);\n        renderPass.setBindGroup(0, uniformBindGroup);\n        renderPass.draw(drawSize);                          \n    }\n    renderPass.end(); \n    device.queue.submit([commandEncoder.finish()])\n    requestAnimationFrame(drawScene);\n}\nrequestAnimationFrame(drawScene);\n}\n\nexport default webGPUDrawCubeAnimated;"],"names":["canvas","document","getElementById","gl","getContext","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","success","getShaderParameter","COMPILE_STATUS","console","log","getShaderInfoLog","fragmentShader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","positionAttributeLocation","getAttribLocation","vao","createVertexArray","bindVertexArray","enableVertexAttribArray","type","FLOAT","vertexAttribPointer","displayWidth","clientWidth","displayHeight","clientHeight","width","height","viewport","clearColor","clear","COLOR_BUFFER_BIT","useProgram","primitiveType","TRIANGLES","drawArrays","id","source","shader","deleteShader","deleteProgram","needResize","obj","dataBuffer","colorAttributeLocation","size","normalize","stride","offset","async","status","result","navigator","gpu","checkGPU","fpsContainer","createElement","controlsContainer","canvasParent","innerHTML","style","display","adapter","requestAdapter","device","requestDevice","context","format","getPreferredCanvasFormat","configure","alphaMode","createGPUBuffer","data","usageFlag","GPUBufferUsage","VERTEX","COPY_DST","buffer","byteLength","usage","mappedAtCreation","getMappedRange","set","Uint32Array","unmap","indexBuffer","ELEMENT_ARRAY_BUFFER","Uint16Array","indexType","UNSIGNED_SHORT","drawElements","cubeUniqueVertexData","cubeIndexData","cubeCompleteVertexData","cubeTextureCoord","cubeFaceColorData","EPSILON","ARRAY_TYPE","Array","create","out","multiply","a","b","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b0","b1","b2","b3","Math","random","PI","hypot","y","i","arguments","length","sqrt","createViewProjectionPerspective","respectRatio","cameraPosition","lookDirection","upDirection","viewMatrix","projectionMatrix","viewProjectionMatrix","eye","center","up","x0","x1","x2","y0","y1","y2","z0","z1","z2","len","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","fovy","aspect","near","far","nf","f","tan","Infinity","abs","identity","cameraOption","zoomMax","zoomSpeed","createTransforms","modelMat","translation","rotation","scaling","rotateXMat","rotateYMat","rotateZMat","translateMat","scaleMat","v","rad","s","sin","c","cos","createGL2Buffer","bufferType","drawType","setGL2Attribute","attribute","attributeLocation","cubeIndices","modelMatrix","mvpMatrix","vpMatrix","mvpMatrixLocation","getUniformLocation","uniformMatrix4fv","enable","DEPTH_TEST","DEPTH_BUFFER_BIT","count","cubeVertices","texture","createTexture","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","Uint8Array","image","Image","crossOrigin","src","addEventListener","generateMipmap","drawScene","CULL_FACE","requestAnimationFrame","drawSize","material","setCubeBasedOnMaterial","vp","tX","tY","tZ","sX","sY","sZ","rX","rY","rZ","e","target","value","window","fps","times","timestamp","shift","push","innerText","toString","removeOtherScene","sceneType","sceneParent","childNodes","forEach","node","nodeName","remove","setThisScene","needsSetup","appendChild","triangleButtoWebGPU","positions","pipeline","createRenderPipeline","vertex","module","createShaderModule","code","entryPoint","buffers","arrayStride","attributes","shaderLocation","fragment","targets","primitive","topology","layout","createPipelineLayout","bindGroupLayouts","commandEncoder","createCommandEncoder","textureView","getCurrentTexture","createView","renderPass","beginRenderPass","colorAttachments","view","clearValue","r","g","loadOp","storeOp","setPipeline","setVertexBuffer","draw","end","queue","submit","finish","webgpuDrawTriangle","triangleButtoWebGL2","squareButtoWebGPU","squareButtoWebGL2","square_with_index_verticesButtoWebGPU","indexData","INDEX","setIndexBuffer","drawIndexed","square_with_index_verticesButtoWebGL2","cube_with_distinct_face_colorsButtoWebGPU","cubeData","colorData","vertexBuffer","colorBuffer","numberOfVertices","uniformBindGroupLayout","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","depthStencil","depthWriteEnabled","depthCompare","uniformBuffer","UNIFORM","uniformBindGroup","createBindGroup","getBindGroupLayout","resource","writeBuffer","depthTexture","GPUTextureUsage","RENDER_ATTACHMENT","depthStencilAttachment","depthClearValue","depthLoadOp","depthStoreOp","depthReadOnly","setBindGroup","cube_with_distinct_face_colorsButtoWebGL2","cube_with_distinct_vertex_colorsButtoWebGPU","cube_with_distinct_vertex_colorsButtoWebGL2","cube_with_textureButtoWebGPU","textureData","textureBuffer","decode","imageBitmap","createImageBitmap","TEXTURE_BINDING","sampler","createSampler","minFilter","magFilter","addressModeU","addressModeV","copyExternalImageToTexture","cube_with_textureButtoWebGL2","interactiveCubeButtoWebGPU","renderPassDescription","interactiveCubeButtoWebGL2"],"sourceRoot":""}