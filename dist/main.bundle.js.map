{"version":3,"file":"main.bundle.js","mappings":"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","sources":["webpack://webgl2-vs-webgpu/./src/triangle/webgl2/shader.ts","webpack://webgl2-vs-webgpu/./src/triangle/webgl2/triangle.webgl2.ts","webpack://webgl2-vs-webgpu/./src/triangle/webgpu/shader.wgsl","webpack://webgl2-vs-webgpu/./src/helpers/webgl2/initialiseGL.ts","webpack://webgl2-vs-webgpu/./src/helpers/webgl2/createShader.ts","webpack://webgl2-vs-webgpu/./src/helpers/webgl2/createProgram.ts","webpack://webgl2-vs-webgpu/./src/helpers/common/resizeCanvasToDisplaySize.ts","webpack://webgl2-vs-webgpu/./src/square/webgl2/square.webgl2.ts","webpack://webgl2-vs-webgpu/./src/square/webgl2/shader.square.webgl.ts","webpack://webgl2-vs-webgpu/./src/square/webgpu/shader.square.webgpu.wgsl","webpack://webgl2-vs-webgpu/./src/helpers/webgpu/initialiseGPU.ts","webpack://webgl2-vs-webgpu/./src/helpers/webgpu/createGPUBuffer.ts","webpack://webgl2-vs-webgpu/./src/square-with-indexed-vertices/webgpu/shader.square-with-indexed-vertices.webgpu.wgsl","webpack://webgl2-vs-webgpu/./src/square-with-indexed-vertices/webgl2/square-with-indexed-vertices.webgl2.ts","webpack://webgl2-vs-webgpu/./src/square-with-indexed-vertices/webgl2/shader.square-with-indexed-vertices.webgl.ts","webpack://webgl2-vs-webgpu/./src/main.ts","webpack://webgl2-vs-webgpu/./src/triangle/webgpu/triangle.webgpu.ts","webpack://webgl2-vs-webgpu/./src/square/webgpu/square.webgpu.ts","webpack://webgl2-vs-webgpu/./src/square-with-indexed-vertices/webgpu/square-with-indexed-vertices.webgpu.ts"],"sourcesContent":["export const vertexShaderSource:string = `#version 300 es\r\nin vec4 a_position;\r\nout vec4 out_color;\r\n\r\nvoid main(){\r\n    gl_Position = a_position;\r\n    out_color = vec4(1.0, 0.0, 0.0, 1.0);\r\n}\r\n`;\r\n\r\nexport const fragmentShaderSource:string = `#version 300 es\r\nprecision highp float;\r\nin vec4 out_color;\r\nout vec4 outColor;\r\n\r\nvoid main(){\r\n    outColor = out_color;\r\n}\r\n`","import { vertexShaderSource, fragmentShaderSource } from \"./shader\";\r\n\r\nconst webgl2DrawTriangle = () => {\r\n    /*******************************************************************/\r\n    /****************           Initialise GL           ****************/\r\n    /*******************************************************************/\r\n    const canvas:HTMLCanvasElement = document.getElementById(\"canvas-webGL2\") as HTMLCanvasElement;\r\n    const gl:WebGL2RenderingContext = canvas.getContext(\"webgl2\") as WebGL2RenderingContext;\r\n\r\n\r\n    /*******************************************************************/\r\n    /**************** Create Shaders and Shader Program ****************/\r\n    /*******************************************************************/\r\n    const vertexShader:WebGLShader = gl.createShader(gl.VERTEX_SHADER) as WebGLShader;\r\n    gl.shaderSource(vertexShader,vertexShaderSource);\r\n    gl.compileShader(vertexShader);\r\n    let success = gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS);\r\n    if(!success){\r\n        console.log(gl.getShaderInfoLog(vertexShader))\r\n    }\r\n\r\n    const fragmentShader:WebGLShader = gl.createShader(gl.FRAGMENT_SHADER) as WebGLShader;\r\n    gl.shaderSource(fragmentShader,fragmentShaderSource);\r\n    gl.compileShader(fragmentShader);\r\n    success = gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS);\r\n    if(!success){\r\n        console.log(gl.getShaderInfoLog(fragmentShader))\r\n    }\r\n\r\n    const program:WebGLProgram = gl.createProgram() as WebGLProgram;\r\n    gl.attachShader(program,vertexShader);\r\n    gl.attachShader(program,fragmentShader);\r\n    gl.linkProgram(program)\r\n    success = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n    if(!success){\r\n        console.log(gl.getProgramInfoLog(program))\r\n    }\r\n\r\n    /*******************************************************************/\r\n    /**********Create Vertex Buffer & Store Triangle's Vertices*********/\r\n    /*******************************************************************/\r\n    const positionBuffer:WebGLBuffer = gl.createBuffer() as WebGLBuffer;\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n    const positions:number[] = [\r\n        -0.5,-0.5,\r\n        0.0, 0.5,\r\n        0.5, -0.5\r\n    ];\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\r\n\r\n    /*******************************************************************/\r\n    /**********          Setup Vertex Array Object             *********/\r\n    /*******************************************************************/\r\n    const positionAttributeLocation:number = gl.getAttribLocation(program, \"a_position\");\r\n    const vao:WebGLVertexArrayObject = gl.createVertexArray() as WebGLVertexArrayObject;\r\n    gl.bindVertexArray(vao);\r\n    gl.enableVertexAttribArray(positionAttributeLocation);\r\n    const size = 2;\r\n    const type = gl.FLOAT;\r\n    const normalize = false;\r\n    const stride = 0;\r\n    const offset = 0;\r\n    gl.vertexAttribPointer(positionAttributeLocation,size, type, normalize, stride, offset);\r\n\r\n    /*******************************************************************/\r\n    /**********                Resize Canvas                   *********/\r\n    /*******************************************************************/\r\n    const displayWidth  = canvas.clientWidth;\r\n    const displayHeight = canvas.clientHeight;\r\n    const needResize = canvas.width  !== displayWidth || canvas.height !== displayHeight;\r\n    if (needResize) {\r\n      canvas.width  = displayWidth;\r\n      canvas.height = displayHeight;\r\n    }\r\n\r\n\r\n    /*******************************************************************/\r\n    /**********                    DRAW                        *********/\r\n    /*******************************************************************/   \r\n    gl.viewport(0,0,gl.canvas.width, gl.canvas.height);\r\n    gl.clearColor(1.0,1.0,1.0,1.0); \r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    gl.useProgram(program);\r\n    const primitiveType = gl.TRIANGLES;\r\n    const drawOffset = 0;\r\n    const count = 3;\r\n    gl.drawArrays(primitiveType, drawOffset, count);\r\n}\r\n\r\nexport default webgl2DrawTriangle;","export default \"struct Ouput{\\r\\n    @builtin(position) Position: vec4<f32>,\\r\\n    @location(0) vColor : vec4<f32>\\r\\n};\\r\\n\\r\\n@vertex\\r\\nfn vs_main(@location(0) pos: vec4<f32>) -> Ouput{\\r\\n    var position = pos;\\r\\n\\r\\n    var color = vec4<f32>(0.0,0.0,1.0,1.0);\\r\\n\\r\\n    var output: Ouput;\\r\\n    output.Position = position;\\r\\n    output.vColor = color;\\r\\n    return output;\\r\\n}\\r\\n\\r\\n@fragment\\r\\nfn fs_main(@location(0) vColor:vec4<f32>) -> @location(0) vec4<f32>{\\r\\n    return vColor;\\r\\n}\"","const initialiseGL = (id=\"canvas-webGL2\") => {\r\n        //get webgl rendering context\r\n        const canvas:HTMLCanvasElement = document.getElementById(id) as HTMLCanvasElement;\r\n        const gl:WebGL2RenderingContext = canvas.getContext(\"webgl2\") as WebGL2RenderingContext;\r\n        return [gl,canvas];\r\n}\r\n\r\nexport default initialiseGL;","const createShader = (gl:WebGL2RenderingContext, type:number, source:string) => {\r\n    const shader:WebGLShader = gl.createShader(type) as WebGLShader;\r\n    gl.shaderSource(shader,source);\r\n    gl.compileShader(shader);\r\n    let success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n    if(success){\r\n        return shader;\r\n    }\r\n    else console.log(gl.getShaderInfoLog(shader))\r\n\r\n    gl.deleteShader(shader);\r\n}\r\n\r\nexport default createShader;","const createProgram = (gl:WebGLRenderingContext, vertexShader:WebGLShader, fragmentShader:WebGLShader) => {\r\n    const program:WebGLProgram = gl.createProgram() as WebGLProgram;\r\n    gl.attachShader(program,vertexShader);\r\n    gl.attachShader(program,fragmentShader);\r\n    gl.linkProgram(program);\r\n    const success = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n    if(success){\r\n        return program;\r\n    }\r\n    gl.deleteProgram(program);\r\n}\r\n\r\nexport default createProgram;","const resizeCanvasToDisplaySize = (canvas:HTMLCanvasElement) => {\r\n    const displayWidth  = canvas.clientWidth;\r\n    const displayHeight = canvas.clientHeight;\r\n    const needResize = canvas.width  !== displayWidth ||\r\n                       canvas.height !== displayHeight;\r\n    if (needResize) {\r\n      canvas.width  = displayWidth;\r\n      canvas.height = displayHeight;\r\n    }\r\n    return needResize;\r\n}\r\n\r\nexport default resizeCanvasToDisplaySize;","import { vertexShaderSource, fragmentShaderSource } from \"./shader.square.webgl\"\r\nimport { createShader, createProgram, initialiseGL } from \"../../helpers/webgl2\"\r\nimport {resizeCanvasToDisplaySize} from \"../../helpers/common\"\r\nconst webGL2DrawSquare = () => {\r\n\r\n    /*******************************************************************/\r\n    /****************           Initialise GL           ****************/\r\n    /*******************************************************************/\r\n    const obj = initialiseGL();\r\n    const gl = obj[0] as WebGL2RenderingContext;\r\n    const canvas = obj[1] as HTMLCanvasElement;\r\n\r\n    /*******************************************************************/\r\n    /**************** Create Shaders and Shader Program ****************/\r\n    /*******************************************************************/\r\n    const vertexShader:WebGLShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource) as WebGLShader;\r\n    const fragmentShader:WebGLShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource) as WebGLShader;\r\n    const program:WebGLProgram = createProgram(gl,fragmentShader,vertexShader) as WebGLProgram;\r\n\r\n    /*******************************************************************/\r\n    /**********Create Vertex Buffer & Store Vertices & Colors***********/\r\n    /*******************************************************************/\r\n    const data:number[] = [\r\n        -0.5,-0.5, 1.0,0.0,0.0,\r\n        -0.5, 0.5, 0.0,1.0,0.0,\r\n        0.5, -0.5, 0.0,1.0,0.0,\r\n        -0.5, 0.5, 0.0,1.0,0.0,\r\n        0.5, -0.5, 0.0,1.0,0.0,\r\n        0.5,0.5, 1.0,0.0,0.0,\r\n    ];\r\n\r\n    const dataBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, dataBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(data), gl.STATIC_DRAW);\r\n\r\n    /*******************************************************************/\r\n    /**********          Setup Vertex Array Object             *********/\r\n    /*******************************************************************/\r\n    const positionAttributeLocation = gl.getAttribLocation(program,\"a_position\");\r\n    const colorAttributeLocation = gl.getAttribLocation(program,\"a_color\");\r\n    \r\n    const vao = gl.createVertexArray();\r\n    gl.bindVertexArray(vao);\r\n    gl.enableVertexAttribArray(positionAttributeLocation);\r\n    let size = 2;\r\n    let type = gl.FLOAT;\r\n    let normalize = false;\r\n    let stride = 20;\r\n    let offset = 0;\r\n\r\n    gl.vertexAttribPointer(positionAttributeLocation,size, type, normalize, stride, offset);\r\n\r\n    gl.enableVertexAttribArray(positionAttributeLocation);\r\n    size = 3;\r\n    type = gl.FLOAT;\r\n    normalize = false;\r\n    stride = 20;\r\n    offset = 8;\r\n    \r\n    gl.vertexAttribPointer(colorAttributeLocation,size, type, normalize, stride, offset);\r\n    gl.enableVertexAttribArray(colorAttributeLocation);\r\n    resizeCanvasToDisplaySize(canvas);\r\n\r\n    /*******************************************************************/\r\n    /**********                    DRAW                        *********/\r\n    /*******************************************************************/ \r\n    gl.viewport(0,0,gl.canvas.width, gl.canvas.height);\r\n    gl.clearColor(1.0,1.0,1.0,1.0); \r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    gl.useProgram(program);\r\n\r\n    const primitiveType = gl.TRIANGLES;\r\n    const drawOffset = 0;\r\n    const count = 6;\r\n    gl.drawArrays(primitiveType, drawOffset, count);\r\n}\r\n\r\nexport default webGL2DrawSquare;","export const vertexShaderSource:string = `#version 300 es\r\nin vec4 a_position;\r\nin vec4 a_color; \r\nout vec4 out_color;\r\nvoid main(){\r\n    gl_Position = a_position;\r\n    out_color = a_color;\r\n}\r\n`;\r\n\r\nexport const fragmentShaderSource:string = `#version 300 es\r\nprecision highp float;\r\n\r\nin vec4 out_color;\r\nout vec4 outColor;\r\nvoid main(){\r\n    outColor = out_color;\r\n}\r\n`","export default \"//vertex shader\\r\\nstruct Ouput{\\r\\n    @builtin(position) Position: vec4<f32>,\\r\\n    @location(0) vColor : vec4<f32>\\r\\n};\\r\\n\\r\\n@vertex\\r\\nfn vs_main(@location(1) pos: vec4<f32>, @location(2) col: vec4<f32>) -> Ouput{\\r\\n    var position = pos;\\r\\n    var color = col;\\r\\n\\r\\n    var output: Ouput;\\r\\n    output.Position = position;\\r\\n    output.vColor = color;\\r\\n    return output;\\r\\n}\\r\\n\\r\\n//fragment shader\\r\\n@fragment\\r\\nfn fs_main(@location(0) vColor:vec4<f32>) -> @location(0) vec4<f32>{\\r\\n    return vColor;\\r\\n}\"","const checkGPU = () => {\r\n    let result = '';\r\n    if(!navigator.gpu){\r\n        result = \"Your current browser does not support WebGPU\";\r\n    }\r\n    return result;\r\n}\r\n\r\nconst initialiseGPU = async (id=\"canvas-webGPU\") => {\r\n    const status = checkGPU();\r\n    if(status!==''){\r\n        window.alert('No WebGPU Support');\r\n    }\r\n\r\n    const canvas = document.getElementById(id) as HTMLCanvasElement;\r\n    const adapter = await navigator.gpu?.requestAdapter(); //the gpu\r\n    const device = await adapter?.requestDevice() as GPUDevice; //provides a connection to the adapter(the gpu)\r\n    const context = canvas.getContext(\"webgpu\") as unknown as GPUCanvasContext;\r\n    \r\n    //adjust size of canvas\r\n    const displayWidth  = canvas.clientWidth;\r\n    const displayHeight = canvas.clientHeight;\r\n    const needResize = canvas.width  !== displayWidth ||\r\n                       canvas.height !== displayHeight;\r\n    if (needResize) {\r\n      canvas.width  = displayWidth;\r\n      canvas.height = displayHeight;\r\n    }\r\n\r\n    const format = await navigator.gpu.getPreferredCanvasFormat();\r\n\r\n    context.configure({\r\n        alphaMode:\"premultiplied\", device, format\r\n    })\r\n\r\n    return {device, canvas, format, context}\r\n}\r\n\r\nexport default initialiseGPU;","const createGPUBuffer = (device:GPUDevice, data: Float32Array, usageFlag:GPUBufferUsageFlags = GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST) => {\r\n    const buffer = device.createBuffer({\r\n        size: data.byteLength,\r\n        usage:usageFlag,\r\n        mappedAtCreation: true\r\n    });\r\n\r\n    new Float32Array(buffer.getMappedRange()).set(data);\r\n    buffer.unmap();\r\n    return buffer;\r\n}\r\n\r\nexport default createGPUBuffer;","export default \"//vertex shader\\r\\nstruct Ouput{\\r\\n    @builtin(position) Position: vec4<f32>,\\r\\n    @location(0) vColor : vec4<f32>\\r\\n};\\r\\n\\r\\n@vertex\\r\\nfn vs_main(@location(1) pos: vec4<f32>, @location(2) col: vec4<f32>) -> Ouput{\\r\\n    var position = pos;\\r\\n    var color = col;\\r\\n\\r\\n    var output: Ouput;\\r\\n    output.Position = position;\\r\\n    output.vColor = color;\\r\\n    return output;\\r\\n}\\r\\n\\r\\n//fragment shader\\r\\n@fragment\\r\\nfn fs_main(@location(0) vColor:vec4<f32>) -> @location(0) vec4<f32>{\\r\\n    return vColor;\\r\\n}\"","import { vertexShaderSource, fragmentShaderSource } from \"./shader.square-with-indexed-vertices.webgl\"\r\nimport { createShader, createProgram, initialiseGL } from \"../../helpers/webgl2\"\r\nimport {resizeCanvasToDisplaySize} from \"../../helpers/common\"\r\nconst webGL2DrawSquareWithIndexedVertices = () => {\r\n    /*******************************************************************/\r\n    /****************           Initialise GL           ****************/\r\n    /*******************************************************************/\r\n    const obj = initialiseGL();\r\n    const gl = obj[0] as WebGL2RenderingContext;\r\n    const canvas = obj[1] as HTMLCanvasElement;\r\n    \r\n    /*******************************************************************/\r\n    /**************** Create Shaders and Shader Program ****************/\r\n    /*******************************************************************/\r\n    const vertexShader:WebGLShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource) as WebGLShader;\r\n    const fragmentShader:WebGLShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource) as WebGLShader;\r\n    const program:WebGLProgram = createProgram(gl,fragmentShader,vertexShader) as WebGLProgram;\r\n\r\n    \r\n    /*******************************************************************/\r\n    /**********Create Vertex Buffer & Store Vertices & Colors***********/\r\n    /*******************************************************************/\r\n    const data:number[] = [\r\n        -0.5,-0.5, 1.0,0.0,0.0,\r\n        -0.5, 0.5, 0.0,0.0,1.0,\r\n        0.5, -0.5, 0.0,0.0,1.0,\r\n        0.5,0.5, 1.0,0.0,0.0,\r\n    ];\r\n\r\n    const dataBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, dataBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(data), gl.STATIC_DRAW);\r\n\r\n\r\n    /*******************************************************************/\r\n    /**********          Setup Vertex Array Object             *********/\r\n    /*******************************************************************/\r\n    const positionAttributeLocation = gl.getAttribLocation(program,\"a_position\");\r\n    const colorAttributeLocation = gl.getAttribLocation(program,\"a_color\");\r\n    \r\n    const vao = gl.createVertexArray();\r\n    gl.bindVertexArray(vao);\r\n    gl.enableVertexAttribArray(positionAttributeLocation);\r\n    let size = 2;\r\n    let type = gl.FLOAT;\r\n    let normalize = false;\r\n    let stride = 20;\r\n    let offset = 0;\r\n\r\n    gl.vertexAttribPointer(positionAttributeLocation,size, type, normalize, stride, offset);\r\n\r\n    gl.enableVertexAttribArray(positionAttributeLocation);\r\n    size = 3;\r\n    type = gl.FLOAT;\r\n    normalize = false;\r\n    stride = 20;\r\n    offset = 8;\r\n    \r\n    gl.vertexAttribPointer(colorAttributeLocation,size, type, normalize, stride, offset);\r\n    gl.enableVertexAttribArray(colorAttributeLocation);\r\n    \r\n    \r\n    /*******************************************************************/\r\n    /**********             Create Index Buffer               *********/\r\n    /*******************************************************************/\r\n    const indices:number[] = [\r\n        0,1,2,\r\n        3,1,2,\r\n    ];\r\n    const indexBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\r\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,new Uint16Array(indices), gl.STATIC_DRAW);\r\n\r\n    resizeCanvasToDisplaySize(canvas);\r\n\r\n    \r\n    /*******************************************************************/\r\n    /**********                    DRAW                        *********/\r\n    /*******************************************************************/ \r\n    gl.viewport(0,0,gl.canvas.width, gl.canvas.height);\r\n    gl.clearColor(1.0,1.0,1.0,1.0); \r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    gl.useProgram(program); \r\n\r\n    const primitiveType = gl.TRIANGLES; \r\n    const drawOffset = 0;\r\n    const count = 6;\r\n    let indexType = gl.UNSIGNED_SHORT;\r\n    gl.drawElements(primitiveType, count, indexType, drawOffset);\r\n}\r\n\r\nexport default webGL2DrawSquareWithIndexedVertices;","export const vertexShaderSource:string = `#version 300 es\r\nin vec4 a_position;\r\nin vec4 a_color;\r\nout vec4 out_color;\r\nvoid main(){\r\n    gl_Position = a_position;\r\n    out_color = a_color;\r\n}\r\n`;\r\n\r\nexport const fragmentShaderSource:string = `#version 300 es\r\nprecision highp float;\r\n\r\nin vec4 out_color;\r\nout vec4 outColor;\r\nvoid main(){\r\n    outColor = out_color;\r\n}\r\n`","import { webgl2DrawTriangle } from \"./triangle/webgl2\";\r\nimport { webgpuDrawTriangle } from \"./triangle/webgpu\"\r\nimport { webGL2DrawSquare } from \"./square/webgl2\";\r\nimport { webGPUDrawSquare } from \"./square/webgpu\";\r\nimport {webGPUDrawSquareWithIndexedVertices} from \"./square-with-indexed-vertices/webgpu\";\r\nimport {webGL2DrawSquareWithIndexedVertices} from \"./square-with-indexed-vertices/webgl2\";\r\n\r\nconst removeOtherScene = (sceneType:string) => {\r\n    const sceneParent = document.getElementById(sceneType) as HTMLElement;\r\n    sceneParent?.childNodes.forEach((node)=>{\r\n        if(node.nodeName===\"CANVAS\"){\r\n            node.remove()\r\n        }\r\n    })\r\n}\r\nconst setThisScene = (sceneType:string) => {\r\n    let needsSetup = true;\r\n    const sceneParent = document.getElementById(sceneType) as HTMLElement;\r\n    sceneParent?.childNodes.forEach((node)=>{\r\n        if(node.nodeName===\"CANVAS\"){\r\n            needsSetup = false;\r\n        }\r\n    })\r\n\r\n    if(needsSetup){\r\n        const canvas = document.createElement(\"canvas\");\r\n        canvas.id=\"canvas-\"+sceneType;\r\n        sceneParent.appendChild(canvas);\r\n    }\r\n}\r\n/*****************************************************************************/\r\n/***************                    Triangle                  ****************/\r\n/*****************************************************************************/\r\nconst triangleButtoWebGPU:HTMLElement|null = document.getElementById(\"webGPUTab-triangle\");\r\ntriangleButtoWebGPU?.addEventListener(\"click\",async ()=>{\r\n    removeOtherScene(\"webGL2\");\r\n    setThisScene(\"webGPU\");\r\n    await webgpuDrawTriangle();\r\n})\r\nconst triangleButtoWebGL2:HTMLElement|null = document.getElementById(\"webGL2Tab-triangle\");\r\ntriangleButtoWebGL2?.addEventListener(\"click\",async ()=>{\r\n    removeOtherScene(\"webGPU\");\r\n    setThisScene(\"webGL2\");\r\n    webgl2DrawTriangle();\r\n})\r\nif(triangleButtoWebGL2!==null)webgl2DrawTriangle();\r\n\r\n\r\n/***************************************************************************/\r\n/***************                    Square                  ****************/\r\n/***************************************************************************/\r\nconst squareButtoWebGPU:HTMLElement|null = document.getElementById(\"webGPUTab-square\");\r\nsquareButtoWebGPU?.addEventListener(\"click\",async ()=>{\r\n    removeOtherScene(\"webGL2\");\r\n    setThisScene(\"webGPU\");\r\n    await webGPUDrawSquare();\r\n})\r\nconst squareButtoWebGL2:HTMLElement|null = document.getElementById(\"webGL2Tab-square\");\r\nsquareButtoWebGL2?.addEventListener(\"click\",async ()=>{\r\n    removeOtherScene(\"webGPU\");\r\n    setThisScene(\"webGL2\");\r\n    webGL2DrawSquare();\r\n})\r\n\r\n/***************************************************************************/\r\n/***************        Square with Indexed Vertices        ****************/\r\n/***************************************************************************/\r\nif(squareButtoWebGL2!==null)webGL2DrawSquare();\r\nconst square_with_index_verticesButtoWebGPU:HTMLElement|null = document.getElementById(\"webGPUTab-square-with-indexed-vertices\");\r\nsquare_with_index_verticesButtoWebGPU?.addEventListener(\"click\",async ()=>{\r\n    removeOtherScene(\"webGL2\");\r\n    setThisScene(\"webGPU\");\r\n    await webGPUDrawSquareWithIndexedVertices();\r\n})\r\nconst square_with_index_verticesButtoWebGL2:HTMLElement|null = document.getElementById(\"webGL2Tab-square-with-indexed-vertices\");\r\nsquare_with_index_verticesButtoWebGL2?.addEventListener(\"click\",async ()=>{\r\n    removeOtherScene(\"webGPU\");\r\n    setThisScene(\"webGL2\");\r\n    webGL2DrawSquareWithIndexedVertices();\r\n})\r\nif(square_with_index_verticesButtoWebGL2!==null)webGL2DrawSquareWithIndexedVertices();","import shader from './shader.wgsl';\r\n\r\nexport const webgpuDrawTriangle = async () => {\r\n    /*******************************************************************/\r\n    /****************           Initialise GPU          ****************/\r\n    /*******************************************************************/\r\n    if(!navigator.gpu){\r\n        window.alert('No WebGPU Support');\r\n    }\r\n\r\n    const canvas = document.getElementById(\"canvas-webGPU\") as HTMLCanvasElement;\r\n    const adapter = await navigator.gpu?.requestAdapter(); \r\n    const device = await adapter?.requestDevice() as GPUDevice; \r\n    const context = canvas.getContext(\"webgpu\") as unknown as GPUCanvasContext;\r\n    context.configure({\r\n        alphaMode:\"premultiplied\", device, format: await navigator.gpu.getPreferredCanvasFormat()\r\n    })\r\n    const format = 'bgra8unorm';\r\n\r\n    /*******************************************************************/\r\n    /**********                Resize Canvas                   *********/\r\n    /*******************************************************************/\r\n    const displayWidth  = canvas.clientWidth;\r\n    const displayHeight = canvas.clientHeight;\r\n    const needResize = canvas.width  !== displayWidth ||canvas.height !== displayHeight;\r\n    if (needResize) {\r\n      canvas.width  = displayWidth;\r\n      canvas.height = displayHeight;\r\n    }\r\n\r\n    /*******************************************************************/\r\n    /**********Create Vertex Buffer & Store Triangle's Vertices*********/\r\n    /*******************************************************************/\r\n    const positions:Float32Array = new Float32Array([\r\n        -0.5,-0.5,\r\n        0.0, 0.5,\r\n        0.5, -0.5\r\n    ]);\r\n    \r\n    const positionBuffer = device.createBuffer({\r\n        size: positions.byteLength,\r\n        usage:GPUBufferUsage.VERTEX,\r\n        mappedAtCreation: true\r\n    });\r\n\r\n    new Float32Array(positionBuffer.getMappedRange()).set(positions);\r\n    positionBuffer.unmap();\r\n\r\n    \r\n    /*******************************************************************/\r\n    /*****Setup Render Pipeline for Vertex & Fragment Shader Stages*****/\r\n    /*******************************************************************/\r\n    let pipeline:GPURenderPipeline;\r\n    pipeline = device.createRenderPipeline({\r\n        vertex:{\r\n            module: device.createShaderModule({\r\n                code:shader\r\n            }),\r\n            entryPoint: \"vs_main\",\r\n            buffers:[\r\n                {\r\n                    arrayStride:8,\r\n                    attributes:[{\r\n                        shaderLocation:0,\r\n                        format:\"float32x2\",\r\n                        offset:0\r\n                    }\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        fragment:{\r\n            module: device.createShaderModule({\r\n                code:shader\r\n            }),\r\n            entryPoint:\"fs_main\",\r\n            targets: [{format}]\r\n        },\r\n        primitive: {\r\n            topology: \"triangle-list\"\r\n        },\r\n        layout: device.createPipelineLayout({\r\n            bindGroupLayouts:[]\r\n        })\r\n    })\r\n\r\n    /*******************************************************************/\r\n    /**********             Create Command Encoder             *********/\r\n    /*******************************************************************/\r\n    const commandEncoder = device.createCommandEncoder();\r\n    const textureView = context.getCurrentTexture().createView();\r\n    const renderPass = commandEncoder.beginRenderPass({ \r\n        colorAttachments: [{\r\n            view:textureView,\r\n            clearValue:{r:1.0, g:1.0, b:1.0, a:1.0},\r\n            loadOp: 'clear',\r\n            storeOp:'store'\r\n        }]\r\n    })\r\n\r\n    /*******************************************************************/\r\n    /**********                    DRAW                        *********/\r\n    /*******************************************************************/ \r\n    renderPass.setPipeline(pipeline);\r\n    renderPass.setVertexBuffer(0, positionBuffer);\r\n    renderPass.draw(3,1,0,0);\r\n    \r\n    renderPass.end(); \r\n    device.queue.submit([commandEncoder.finish()])\r\n}","import shader from './shader.square.webgpu.wgsl'\r\nimport { initialiseGPU, createGPUBuffer } from '../../helpers/webgpu';\r\nconst webGPUDrawSquare = async () => {\r\n    /*******************************************************************/\r\n    /****************           Initialise GPU          ****************/\r\n    /*******************************************************************/\r\n    const gpu = await initialiseGPU();\r\n    const format = 'bgra8unorm';\r\n    const device = gpu.device;\r\n    const context = gpu.context;\r\n\r\n    /*******************************************************************/\r\n    /**********Create Vertex Buffer & Store Vertices & Colors**********/\r\n    /*******************************************************************/\r\n    const data:Float32Array = new Float32Array([\r\n        -0.5,-0.5, 0.0,0.0,1.0,\r\n        -0.5, 0.5, 0.0,1.0,0.0,\r\n        0.5, -0.5, 0.0,1.0,0.0,\r\n        -0.5, 0.5, 0.0,1.0,0.0,\r\n        0.5, -0.5, 0.0,1.0,0.0,\r\n        0.5,0.5, 0.0,0.0,1.0,\r\n    ]);\r\n\r\n    const dataBuffer = createGPUBuffer(device, data, GPUBufferUsage.VERTEX);\r\n\r\n    /*******************************************************************/\r\n    /*****Setup Render Pipeline for Vertex & Fragment Shader Stages*****/\r\n    /*******************************************************************/\r\n    let pipeline = device.createRenderPipeline({\r\n        vertex:{\r\n            module: device.createShaderModule({\r\n                code:shader\r\n            }),\r\n            entryPoint: \"vs_main\",\r\n            buffers:[\r\n                {\r\n                    arrayStride:20,            \r\n                    attributes:[\r\n                        {\r\n                            shaderLocation:1,   \r\n                            format:\"float32x2\",\r\n                            offset:0            \r\n                        },\r\n                        {\r\n                            shaderLocation:2,   \r\n                            format:\"float32x3\",\r\n                            offset:8            \r\n                        }\r\n                ]\r\n                }\r\n            ]\r\n        },\r\n        fragment:{\r\n            module:device.createShaderModule({\r\n                code:shader\r\n            }),\r\n            entryPoint:\"fs_main\",\r\n            targets:[{format}]\r\n        },\r\n        primitive:{\r\n            topology:\"triangle-list\"\r\n        },\r\n        layout: device.createPipelineLayout({\r\n            bindGroupLayouts:[]\r\n        })\r\n    })\r\n\r\n    /*******************************************************************/\r\n    /**********             Create Command Encoder             *********/\r\n    /*******************************************************************/\r\n    const commandEncoder = device.createCommandEncoder();\r\n    const textureView = context.getCurrentTexture().createView();\r\n    const renderPass = commandEncoder.beginRenderPass({ \r\n        colorAttachments: [{\r\n            view:textureView,\r\n            clearValue:{r:1.0, g:1.0, b:1.0, a:1.0},\r\n            loadOp: 'clear',\r\n            storeOp:'store'\r\n        }]\r\n    })\r\n\r\n    /*******************************************************************/\r\n    /**********                    DRAW                        *********/\r\n    /*******************************************************************/\r\n    renderPass.setPipeline(pipeline);\r\n    renderPass.setVertexBuffer(0, dataBuffer);          \r\n    renderPass.draw(6,1,0,0);                           \r\n    \r\n    renderPass.end(); \r\n    device.queue.submit([commandEncoder.finish()]) \r\n}\r\n\r\nexport default webGPUDrawSquare;","import shader from './shader.square-with-indexed-vertices.webgpu.wgsl'\r\nimport { initialiseGPU, createGPUBuffer } from '../../helpers/webgpu';\r\nconst webGPUDrawSquareWithIndexedVertices = async () => {\r\n    /*******************************************************************/\r\n    /****************           Initialise GPU          ****************/\r\n    /*******************************************************************/\r\n    const gpu = await initialiseGPU();\r\n    const format = 'bgra8unorm';\r\n    const device = gpu.device;\r\n    const context = gpu.context;\r\n\r\n    /*******************************************************************/\r\n    /**********Create Vertex Buffer & Store Vertices & Colors**********/\r\n    /*******************************************************************/\r\n    const data:Float32Array = new Float32Array([\r\n        -0.5,-0.5, 0.0,0.0,1.0,\r\n        -0.5, 0.5, 1.0,0.0,0.0,\r\n        0.5, -0.5, 1.0,0.0,0.0,\r\n        0.5,0.5, 0.0,0.0,1.0\r\n    ]);\r\n    const dataBuffer = createGPUBuffer(device, data, GPUBufferUsage.VERTEX);\r\n\r\n    /*******************************************************************/\r\n    /**********               Create Index Buffer              *********/\r\n    /*******************************************************************/\r\n    const indexData = new Uint32Array([0,1,2,3,2,1])\r\n    const indexBuffer = device.createBuffer({\r\n        size: indexData.byteLength,\r\n        usage:GPUBufferUsage.INDEX,\r\n        mappedAtCreation: true\r\n    });\r\n    new Uint32Array(indexBuffer.getMappedRange()).set(indexData);\r\n    indexBuffer.unmap();\r\n\r\n\r\n    /*******************************************************************/\r\n    /*****Setup Render Pipeline for Vertex & Fragment Shader Stages*****/\r\n    /*******************************************************************/\r\n    let pipeline = device.createRenderPipeline({\r\n        vertex:{\r\n            module: device.createShaderModule({\r\n                code:shader\r\n            }),\r\n            entryPoint: \"vs_main\",\r\n            buffers:[\r\n                {\r\n                    arrayStride:20,            \r\n                    attributes:[\r\n                        {\r\n                            shaderLocation:1,   \r\n                            format:\"float32x2\",\r\n                            offset:0            \r\n                        },\r\n                        {\r\n                            shaderLocation:2,  \r\n                            format:\"float32x3\",\r\n                            offset:8            \r\n                        }\r\n                ]\r\n                }\r\n            ]\r\n        },\r\n        fragment:{\r\n            module:device.createShaderModule({\r\n                code:shader\r\n            }),\r\n            entryPoint:\"fs_main\",\r\n            targets:[{format}]\r\n        },\r\n        primitive:{\r\n            topology:\"triangle-list\"\r\n        },\r\n        layout: device.createPipelineLayout({\r\n            bindGroupLayouts:[]\r\n        })\r\n    })\r\n\r\n\r\n    /*******************************************************************/\r\n    /**********             Create Command Encoder             *********/\r\n    /*******************************************************************/\r\n    const commandEncoder = device.createCommandEncoder();\r\n    const textureView = context.getCurrentTexture().createView();\r\n    const renderPass = commandEncoder.beginRenderPass({ \r\n        colorAttachments: [{\r\n            view:textureView,\r\n            clearValue:{r:1.0, g:1.0, b:1.0, a:1.0},\r\n            loadOp: 'clear',\r\n            storeOp:'store'\r\n        }]\r\n    })\r\n\r\n    /*******************************************************************/\r\n    /**********                    DRAW                        *********/\r\n    /*******************************************************************/\r\n    renderPass.setPipeline(pipeline);\r\n    renderPass.setVertexBuffer(0, dataBuffer);          \r\n    renderPass.setIndexBuffer(indexBuffer,\"uint32\");    \r\n    renderPass.drawIndexed(6,1,0,0);                           \r\n    \r\n    renderPass.end(); \r\n    device.queue.submit([commandEncoder.finish()]) \r\n}\r\n\r\nexport default webGPUDrawSquareWithIndexedVertices;"],"names":["canvas","document","getElementById","gl","getContext","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","success","getShaderParameter","COMPILE_STATUS","console","log","getShaderInfoLog","fragmentShader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","positionAttributeLocation","getAttribLocation","vao","createVertexArray","bindVertexArray","enableVertexAttribArray","type","FLOAT","vertexAttribPointer","displayWidth","clientWidth","displayHeight","clientHeight","width","height","viewport","clearColor","clear","COLOR_BUFFER_BIT","useProgram","primitiveType","TRIANGLES","drawArrays","id","source","shader","deleteShader","deleteProgram","needResize","obj","dataBuffer","colorAttributeLocation","size","normalize","stride","offset","async","result","navigator","gpu","checkGPU","window","alert","adapter","requestAdapter","device","requestDevice","context","format","getPreferredCanvasFormat","configure","alphaMode","data","usageFlag","GPUBufferUsage","VERTEX","COPY_DST","buffer","byteLength","usage","mappedAtCreation","getMappedRange","set","unmap","indexBuffer","ELEMENT_ARRAY_BUFFER","Uint16Array","indexType","UNSIGNED_SHORT","drawElements","removeOtherScene","sceneType","sceneParent","childNodes","forEach","node","nodeName","remove","setThisScene","needsSetup","createElement","appendChild","triangleButtoWebGPU","addEventListener","positions","pipeline","createRenderPipeline","vertex","module","createShaderModule","code","entryPoint","buffers","arrayStride","attributes","shaderLocation","fragment","targets","primitive","topology","layout","createPipelineLayout","bindGroupLayouts","commandEncoder","createCommandEncoder","textureView","getCurrentTexture","createView","renderPass","beginRenderPass","colorAttachments","view","clearValue","r","g","b","a","loadOp","storeOp","setPipeline","setVertexBuffer","draw","end","queue","submit","finish","webgpuDrawTriangle","triangleButtoWebGL2","squareButtoWebGPU","squareButtoWebGL2","square_with_index_verticesButtoWebGPU","indexData","Uint32Array","INDEX","setIndexBuffer","drawIndexed","square_with_index_verticesButtoWebGL2"],"sourceRoot":""}