(()=>{"use strict";const e=()=>{const e=document.getElementById("canvas-webGL2"),t=e.getContext("webgl2"),r=t.createShader(t.VERTEX_SHADER);t.shaderSource(r,"#version 300 es\nin vec4 a_position;\nout vec4 out_color;\n\nvoid main(){\n    gl_Position = a_position;\n    out_color = vec4(1.0, 0.0, 0.0, 1.0);\n}\n"),t.compileShader(r);let o=t.getShaderParameter(r,t.COMPILE_STATUS);o||console.log(t.getShaderInfoLog(r));const n=t.createShader(t.FRAGMENT_SHADER);t.shaderSource(n,"#version 300 es\nprecision highp float;\nin vec4 out_color;\nout vec4 outColor;\n\nvoid main(){\n    outColor = out_color;\n}\n"),t.compileShader(n),o=t.getShaderParameter(n,t.COMPILE_STATUS),o||console.log(t.getShaderInfoLog(n));const a=t.createProgram();t.attachShader(a,r),t.attachShader(a,n),t.linkProgram(a),o=t.getProgramParameter(a,t.LINK_STATUS),o||console.log(t.getProgramInfoLog(a));const i=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,i),t.bufferData(t.ARRAY_BUFFER,new Float32Array([-.5,-.5,0,.5,.5,-.5]),t.STATIC_DRAW);const c=t.getAttribLocation(a,"a_position"),l=t.createVertexArray();t.bindVertexArray(l),t.enableVertexAttribArray(c);const s=t.FLOAT;t.vertexAttribPointer(c,2,s,!1,0,0);const u=e.clientWidth,d=e.clientHeight;(e.width!==u||e.height!==d)&&(e.width=u,e.height=d),t.viewport(0,0,t.canvas.width,t.canvas.height),t.clearColor(1,1,1,1),t.clear(t.COLOR_BUFFER_BIT),t.useProgram(a);const f=t.TRIANGLES;t.drawArrays(f,0,3)},t="struct Ouput{\r\n    @builtin(position) Position: vec4<f32>,\r\n    @location(0) vColor : vec4<f32>\r\n};\r\n\r\n@vertex\r\nfn vs_main(@location(0) pos: vec4<f32>) -> Ouput{\r\n    var position = pos;\r\n\r\n    var color = vec4<f32>(0.0,0.0,1.0,1.0);\r\n\r\n    var output: Ouput;\r\n    output.Position = position;\r\n    output.vColor = color;\r\n    return output;\r\n}\r\n\r\n@fragment\r\nfn fs_main(@location(0) vColor:vec4<f32>) -> @location(0) vec4<f32>{\r\n    return vColor;\r\n}",r=(e="canvas-webGL2")=>{const t=document.getElementById(e);return[t.getContext("webgl2"),t]},o=(e,t,r)=>{const o=e.createShader(t);if(e.shaderSource(o,r),e.compileShader(o),e.getShaderParameter(o,e.COMPILE_STATUS))return o;console.log(e.getShaderInfoLog(o)),e.deleteShader(o)},n=(e,t,r)=>{const o=e.createProgram();if(e.attachShader(o,t),e.attachShader(o,r),e.linkProgram(o),e.getProgramParameter(o,e.LINK_STATUS))return o;e.deleteProgram(o)},a=e=>{const t=e.clientWidth,r=e.clientHeight,o=e.width!==t||e.height!==r;return o&&(e.width=t,e.height=r),o},i=()=>{const e=r(),t=e[0],i=e[1],c=o(t,t.VERTEX_SHADER,"#version 300 es\nin vec4 a_position;\nin vec4 a_color; \nout vec4 out_color;\nvoid main(){\n    gl_Position = a_position;\n    out_color = a_color;\n}\n"),l=o(t,t.FRAGMENT_SHADER,"#version 300 es\nprecision highp float;\n\nin vec4 out_color;\nout vec4 outColor;\nvoid main(){\n    outColor = out_color;\n}\n"),s=n(t,l,c),u=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,u),t.bufferData(t.ARRAY_BUFFER,new Float32Array([-.5,-.5,1,0,0,-.5,.5,0,1,0,.5,-.5,0,1,0,-.5,.5,0,1,0,.5,-.5,0,1,0,.5,.5,1,0,0]),t.STATIC_DRAW);const d=t.getAttribLocation(s,"a_position"),f=t.getAttribLocation(s,"a_color"),g=t.createVertexArray();t.bindVertexArray(g),t.enableVertexAttribArray(d);let v=2,m=t.FLOAT,p=!1,h=20,A=0;t.vertexAttribPointer(d,v,m,p,h,A),t.enableVertexAttribArray(d),v=3,m=t.FLOAT,p=!1,h=20,A=8,t.vertexAttribPointer(f,v,m,p,h,A),t.enableVertexAttribArray(f),a(i),t.viewport(0,0,t.canvas.width,t.canvas.height),t.clearColor(1,1,1,1),t.clear(t.COLOR_BUFFER_BIT),t.useProgram(s);const b=t.TRIANGLES;t.drawArrays(b,0,6)},c="//vertex shader\r\nstruct Ouput{\r\n    @builtin(position) Position: vec4<f32>,\r\n    @location(0) vColor : vec4<f32>\r\n};\r\n\r\n@vertex\r\nfn vs_main(@location(1) pos: vec4<f32>, @location(2) col: vec4<f32>) -> Ouput{\r\n    var position = pos;\r\n    var color = col;\r\n\r\n    var output: Ouput;\r\n    output.Position = position;\r\n    output.vColor = color;\r\n    return output;\r\n}\r\n\r\n//fragment shader\r\n@fragment\r\nfn fs_main(@location(0) vColor:vec4<f32>) -> @location(0) vec4<f32>{\r\n    return vColor;\r\n}",l=async(e="canvas-webGPU")=>{var t;""!==(()=>{let e="";return navigator.gpu||(e="Your current browser does not support WebGPU"),e})()&&window.alert("No WebGPU Support");const r=document.getElementById(e),o=await(null===(t=navigator.gpu)||void 0===t?void 0:t.requestAdapter()),n=await(null==o?void 0:o.requestDevice()),a=r.getContext("webgpu"),i=r.clientWidth,c=r.clientHeight;(r.width!==i||r.height!==c)&&(r.width=i,r.height=c);const l=await navigator.gpu.getPreferredCanvasFormat();return a.configure({alphaMode:"premultiplied",device:n,format:l}),{device:n,canvas:r,format:l,context:a}},s=(e,t,r=GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST)=>{const o=e.createBuffer({size:t.byteLength,usage:r,mappedAtCreation:!0});return new Float32Array(o.getMappedRange()).set(t),o.unmap(),o},u="//vertex shader\r\nstruct Ouput{\r\n    @builtin(position) Position: vec4<f32>,\r\n    @location(0) vColor : vec4<f32>\r\n};\r\n\r\n@vertex\r\nfn vs_main(@location(1) pos: vec4<f32>, @location(2) col: vec4<f32>) -> Ouput{\r\n    var position = pos;\r\n    var color = col;\r\n\r\n    var output: Ouput;\r\n    output.Position = position;\r\n    output.vColor = color;\r\n    return output;\r\n}\r\n\r\n//fragment shader\r\n@fragment\r\nfn fs_main(@location(0) vColor:vec4<f32>) -> @location(0) vec4<f32>{\r\n    return vColor;\r\n}",d=()=>{const e=r(),t=e[0],i=e[1],c=o(t,t.VERTEX_SHADER,"#version 300 es\nin vec4 a_position;\nin vec4 a_color;\nout vec4 out_color;\nvoid main(){\n    gl_Position = a_position;\n    out_color = a_color;\n}\n"),l=o(t,t.FRAGMENT_SHADER,"#version 300 es\nprecision highp float;\n\nin vec4 out_color;\nout vec4 outColor;\nvoid main(){\n    outColor = out_color;\n}\n"),s=n(t,l,c),u=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,u),t.bufferData(t.ARRAY_BUFFER,new Float32Array([-.5,-.5,1,0,0,-.5,.5,0,0,1,.5,-.5,0,0,1,.5,.5,1,0,0]),t.STATIC_DRAW);const d=t.getAttribLocation(s,"a_position"),f=t.getAttribLocation(s,"a_color"),g=t.createVertexArray();t.bindVertexArray(g),t.enableVertexAttribArray(d);let v=2,m=t.FLOAT,p=!1,h=20,A=0;t.vertexAttribPointer(d,v,m,p,h,A),t.enableVertexAttribArray(d),v=3,m=t.FLOAT,p=!1,h=20,A=8,t.vertexAttribPointer(f,v,m,p,h,A),t.enableVertexAttribArray(f);const b=t.createBuffer();t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,b),t.bufferData(t.ELEMENT_ARRAY_BUFFER,new Uint16Array([0,1,2,3,1,2]),t.STATIC_DRAW),a(i),t.viewport(0,0,t.canvas.width,t.canvas.height),t.clearColor(1,1,1,1),t.clear(t.COLOR_BUFFER_BIT),t.useProgram(s);const w=t.TRIANGLES;let _=t.UNSIGNED_SHORT;t.drawElements(w,6,_,0)},f=e=>{const t=document.getElementById(e);null==t||t.childNodes.forEach((e=>{"CANVAS"===e.nodeName&&e.remove()}))},g=e=>{let t=!0;const r=document.getElementById(e);if(null==r||r.childNodes.forEach((e=>{"CANVAS"===e.nodeName&&(t=!1)})),t){const t=document.createElement("canvas");t.id="canvas-"+e,r.appendChild(t)}},v=document.getElementById("webGPUTab-triangle");null==v||v.addEventListener("click",(async()=>{f("webGL2"),g("webGPU"),await(async()=>{var e;navigator.gpu||window.alert("No WebGPU Support");const r=document.getElementById("canvas-webGPU"),o=await(null===(e=navigator.gpu)||void 0===e?void 0:e.requestAdapter()),n=await(null==o?void 0:o.requestDevice()),a=r.getContext("webgpu");a.configure({alphaMode:"premultiplied",device:n,format:await navigator.gpu.getPreferredCanvasFormat()});const i=r.clientWidth,c=r.clientHeight;(r.width!==i||r.height!==c)&&(r.width=i,r.height=c);const l=new Float32Array([-.5,-.5,0,.5,.5,-.5]),s=n.createBuffer({size:l.byteLength,usage:GPUBufferUsage.VERTEX,mappedAtCreation:!0});let u;new Float32Array(s.getMappedRange()).set(l),s.unmap(),u=n.createRenderPipeline({vertex:{module:n.createShaderModule({code:t}),entryPoint:"vs_main",buffers:[{arrayStride:8,attributes:[{shaderLocation:0,format:"float32x2",offset:0}]}]},fragment:{module:n.createShaderModule({code:t}),entryPoint:"fs_main",targets:[{format:"bgra8unorm"}]},primitive:{topology:"triangle-list"},layout:n.createPipelineLayout({bindGroupLayouts:[]})});const d=n.createCommandEncoder(),f=a.getCurrentTexture().createView(),g=d.beginRenderPass({colorAttachments:[{view:f,clearValue:{r:1,g:1,b:1,a:1},loadOp:"clear",storeOp:"store"}]});g.setPipeline(u),g.setVertexBuffer(0,s),g.draw(3,1,0,0),g.end(),n.queue.submit([d.finish()])})()}));const m=document.getElementById("webGL2Tab-triangle");null==m||m.addEventListener("click",(async()=>{f("webGPU"),g("webGL2"),e()})),null!==m&&e();const p=document.getElementById("webGPUTab-square");null==p||p.addEventListener("click",(async()=>{f("webGL2"),g("webGPU"),await(async()=>{const e=await l(),t=e.device,r=e.context,o=new Float32Array([-.5,-.5,0,0,1,-.5,.5,0,1,0,.5,-.5,0,1,0,-.5,.5,0,1,0,.5,-.5,0,1,0,.5,.5,0,0,1]),n=s(t,o,GPUBufferUsage.VERTEX);let a=t.createRenderPipeline({vertex:{module:t.createShaderModule({code:c}),entryPoint:"vs_main",buffers:[{arrayStride:20,attributes:[{shaderLocation:1,format:"float32x2",offset:0},{shaderLocation:2,format:"float32x3",offset:8}]}]},fragment:{module:t.createShaderModule({code:c}),entryPoint:"fs_main",targets:[{format:"bgra8unorm"}]},primitive:{topology:"triangle-list"},layout:t.createPipelineLayout({bindGroupLayouts:[]})});const i=t.createCommandEncoder(),u=r.getCurrentTexture().createView(),d=i.beginRenderPass({colorAttachments:[{view:u,clearValue:{r:1,g:1,b:1,a:1},loadOp:"clear",storeOp:"store"}]});d.setPipeline(a),d.setVertexBuffer(0,n),d.draw(6,1,0,0),d.end(),t.queue.submit([i.finish()])})()}));const h=document.getElementById("webGL2Tab-square");null==h||h.addEventListener("click",(async()=>{f("webGPU"),g("webGL2"),i()})),null!==h&&i();const A=document.getElementById("webGPUTab-square-with-indexed-vertices");null==A||A.addEventListener("click",(async()=>{f("webGL2"),g("webGPU"),await(async()=>{const e=await l(),t=e.device,r=e.context,o=new Float32Array([-.5,-.5,0,0,1,-.5,.5,1,0,0,.5,-.5,1,0,0,.5,.5,0,0,1]),n=s(t,o,GPUBufferUsage.VERTEX),a=new Uint32Array([0,1,2,3,2,1]),i=t.createBuffer({size:a.byteLength,usage:GPUBufferUsage.INDEX,mappedAtCreation:!0});new Uint32Array(i.getMappedRange()).set(a),i.unmap();let c=t.createRenderPipeline({vertex:{module:t.createShaderModule({code:u}),entryPoint:"vs_main",buffers:[{arrayStride:20,attributes:[{shaderLocation:1,format:"float32x2",offset:0},{shaderLocation:2,format:"float32x3",offset:8}]}]},fragment:{module:t.createShaderModule({code:u}),entryPoint:"fs_main",targets:[{format:"bgra8unorm"}]},primitive:{topology:"triangle-list"},layout:t.createPipelineLayout({bindGroupLayouts:[]})});const d=t.createCommandEncoder(),f=r.getCurrentTexture().createView(),g=d.beginRenderPass({colorAttachments:[{view:f,clearValue:{r:1,g:1,b:1,a:1},loadOp:"clear",storeOp:"store"}]});g.setPipeline(c),g.setVertexBuffer(0,n),g.setIndexBuffer(i,"uint32"),g.drawIndexed(6,1,0,0),g.end(),t.queue.submit([d.finish()])})()}));const b=document.getElementById("webGL2Tab-square-with-indexed-vertices");null==b||b.addEventListener("click",(async()=>{f("webGPU"),g("webGL2"),d()})),null!==b&&d()})();
//# sourceMappingURL=main.bundle.js.map